
Air Conditioner.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000139e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  0000139e  00001432  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  0080009e  0080009e  00001470  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001470  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000014a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  000014dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025e2  00000000  00000000  000016cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d94  00000000  00000000  00003cae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015f1  00000000  00000000  00004a42  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e0  00000000  00000000  00006034  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b05  00000000  00000000  00006514  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d2e  00000000  00000000  00007019  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00008d47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 40 05 	jmp	0xa80	; 0xa80 <__vector_1>
       8:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__vector_2>
       c:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__vector_3>
      10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      14:	0c 94 6e 07 	jmp	0xedc	; 0xedc <__vector_5>
      18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	11 07       	cpc	r17, r17
      56:	1c 07       	cpc	r17, r28
      58:	32 07       	cpc	r19, r18
      5a:	27 07       	cpc	r18, r23
      5c:	3d 07       	cpc	r19, r29
      5e:	48 07       	cpc	r20, r24
      60:	53 07       	cpc	r21, r19

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	10 e0       	ldi	r17, 0x00	; 0
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	ee e9       	ldi	r30, 0x9E	; 158
      76:	f3 e1       	ldi	r31, 0x13	; 19
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	ae 39       	cpi	r26, 0x9E	; 158
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	20 e0       	ldi	r18, 0x00	; 0
      86:	ae e9       	ldi	r26, 0x9E	; 158
      88:	b0 e0       	ldi	r27, 0x00	; 0
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	ad 3a       	cpi	r26, 0xAD	; 173
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 50 03 	call	0x6a0	; 0x6a0 <main>
      98:	0c 94 cd 09 	jmp	0x139a	; 0x139a <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <adjust_Welcome>:
                                   FUNCTION IMPLMENTATION
****************************************************************************************************************************/

void adjust_Welcome(void){

	LCD_GoTo(1,0);
      a0:	60 e0       	ldi	r22, 0x00	; 0
      a2:	81 e0       	ldi	r24, 0x01	; 1
      a4:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
	LCD_Write_String("MAX TEMP IS 35");
      a8:	81 e6       	ldi	r24, 0x61	; 97
      aa:	90 e0       	ldi	r25, 0x00	; 0
      ac:	0e 94 d5 02 	call	0x5aa	; 0x5aa <LCD_Write_String>
	LCD_GoTo(2,0);
      b0:	60 e0       	ldi	r22, 0x00	; 0
      b2:	82 e0       	ldi	r24, 0x02	; 2
      b4:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
	LCD_Write_String("MIN TEMP IS 18");
      b8:	80 e7       	ldi	r24, 0x70	; 112
      ba:	90 e0       	ldi	r25, 0x00	; 0
      bc:	0e 94 d5 02 	call	0x5aa	; 0x5aa <LCD_Write_String>
	TIMER_0_DELAY_MS(500);
      c0:	60 e0       	ldi	r22, 0x00	; 0
      c2:	70 e0       	ldi	r23, 0x00	; 0
      c4:	8a ef       	ldi	r24, 0xFA	; 250
      c6:	93 e4       	ldi	r25, 0x43	; 67
      c8:	0e 94 ae 06 	call	0xd5c	; 0xd5c <TIMER_0_DELAY_MS>
	LCD_Clear();
      cc:	0e 94 3a 03 	call	0x674	; 0x674 <LCD_Clear>
	
	
	LCD_GoTo(1,0);
      d0:	60 e0       	ldi	r22, 0x00	; 0
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
	LCD_Write_String("PLEASE CHOOSE ");
      d8:	8f e7       	ldi	r24, 0x7F	; 127
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	0e 94 d5 02 	call	0x5aa	; 0x5aa <LCD_Write_String>
	LCD_GoTo(2,0);
      e0:	60 e0       	ldi	r22, 0x00	; 0
      e2:	82 e0       	ldi	r24, 0x02	; 2
      e4:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
	LCD_Write_String("REQUIRED TEMP ");
      e8:	8e e8       	ldi	r24, 0x8E	; 142
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	0e 94 d5 02 	call	0x5aa	; 0x5aa <LCD_Write_String>
	TIMER_0_DELAY_MS(500);
      f0:	60 e0       	ldi	r22, 0x00	; 0
      f2:	70 e0       	ldi	r23, 0x00	; 0
      f4:	8a ef       	ldi	r24, 0xFA	; 250
      f6:	93 e4       	ldi	r25, 0x43	; 67
      f8:	0e 94 ae 06 	call	0xd5c	; 0xd5c <TIMER_0_DELAY_MS>
	LCD_Clear();
      fc:	0e 94 3a 03 	call	0x674	; 0x674 <LCD_Clear>
     100:	08 95       	ret

00000102 <adjust_stage>:
}


void adjust_stage(void){
     102:	cf 93       	push	r28
     104:	df 93       	push	r29
uint8_t key = 0;
     106:	d0 e0       	ldi	r29, 0x00	; 0
	 while (key != '3' && g_flagStage != 2)
     108:	3c c0       	rjmp	.+120    	; 0x182 <adjust_stage+0x80>
	 {
		key = KEYPAD_getKey() ;
     10a:	0e 94 04 01 	call	0x208	; 0x208 <KEYPAD_getKey>
     10e:	d8 2f       	mov	r29, r24
		TIMER_0_DELAY_MS(50);
     110:	60 e0       	ldi	r22, 0x00	; 0
     112:	70 e0       	ldi	r23, 0x00	; 0
     114:	88 e4       	ldi	r24, 0x48	; 72
     116:	92 e4       	ldi	r25, 0x42	; 66
     118:	0e 94 ae 06 	call	0xd5c	; 0xd5c <TIMER_0_DELAY_MS>
			switch(key){
     11c:	d1 33       	cpi	r29, 0x31	; 49
     11e:	19 f0       	breq	.+6      	; 0x126 <adjust_stage+0x24>
     120:	d2 33       	cpi	r29, 0x32	; 50
     122:	49 f0       	breq	.+18     	; 0x136 <adjust_stage+0x34>
     124:	12 c0       	rjmp	.+36     	; 0x14a <adjust_stage+0x48>
				case '1' :
				g_tempValue++;
     126:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     12a:	8f 5f       	subi	r24, 0xFF	; 255
     12c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				g_flagTimer = 0;
     130:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <g_flagTimer>
				break;
     134:	0d c0       	rjmp	.+26     	; 0x150 <adjust_stage+0x4e>
				
				case '2' :
				g_tempValue--;
     136:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     13a:	81 50       	subi	r24, 0x01	; 1
     13c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				LCD_Clear();
     140:	0e 94 3a 03 	call	0x674	; 0x674 <LCD_Clear>
				g_flagTimer = 0;
     144:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <g_flagTimer>
				break;
     148:	03 c0       	rjmp	.+6      	; 0x150 <adjust_stage+0x4e>
				
				default :
				g_flagTimer = 1;
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <g_flagTimer>
				break;
				
			}
	
			
			LCD_GoTo(1,7);
     150:	67 e0       	ldi	r22, 0x07	; 7
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
			LCD_Write_Number(g_tempValue);
     158:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     15c:	70 e0       	ldi	r23, 0x00	; 0
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LCD_Write_Number>
			LCD_GoTo(2,0);
     166:	60 e0       	ldi	r22, 0x00	; 0
     168:	82 e0       	ldi	r24, 0x02	; 2
     16a:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_GoTo>
			for (uint8_t i= 18 ; i <= g_tempValue ; i++)
     16e:	c2 e1       	ldi	r28, 0x12	; 18
     170:	04 c0       	rjmp	.+8      	; 0x17a <adjust_stage+0x78>
			{
				LCD_Write_Charecter('|');
     172:	8c e7       	ldi	r24, 0x7C	; 124
     174:	0e 94 4c 03 	call	0x698	; 0x698 <LCD_Write_Charecter>
	
			
			LCD_GoTo(1,7);
			LCD_Write_Number(g_tempValue);
			LCD_GoTo(2,0);
			for (uint8_t i= 18 ; i <= g_tempValue ; i++)
     178:	cf 5f       	subi	r28, 0xFF	; 255
     17a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     17e:	8c 17       	cp	r24, r28
     180:	c0 f7       	brcc	.-16     	; 0x172 <adjust_stage+0x70>
}


void adjust_stage(void){
uint8_t key = 0;
	 while (key != '3' && g_flagStage != 2)
     182:	d3 33       	cpi	r29, 0x33	; 51
     184:	29 f0       	breq	.+10     	; 0x190 <adjust_stage+0x8e>
     186:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <g_flagStage>
     18a:	82 30       	cpi	r24, 0x02	; 2
     18c:	09 f0       	breq	.+2      	; 0x190 <adjust_stage+0x8e>
     18e:	bd cf       	rjmp	.-134    	; 0x10a <adjust_stage+0x8>
				LCD_Write_Charecter('|');
			}
			
	
	}
	g_flagStage = 2 ;
     190:	82 e0       	ldi	r24, 0x02	; 2
     192:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <g_flagStage>
}
     196:	df 91       	pop	r29
     198:	cf 91       	pop	r28
     19a:	08 95       	ret

0000019c <app_Init>:



void app_Init(void){
	
	KEYPAD_init();
     19c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <KEYPAD_init>
	TIMER_2_INT();
     1a0:	0e 94 60 07 	call	0xec0	; 0xec0 <TIMER_2_INT>
	LCD_INIT();
     1a4:	0e 94 85 02 	call	0x50a	; 0x50a <LCD_INIT>
     1a8:	08 95       	ret

000001aa <app_Start>:
}

void app_Start(void){
	
	if (g_flagStage == 0 ){
     1aa:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <g_flagStage>
     1ae:	81 11       	cpse	r24, r1
     1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <app_Start+0xe>
		//starting 
		
		g_flagStage = 1 ;
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <g_flagStage>
	}
	
	
if (g_flagStage == 1 ){
     1b8:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <g_flagStage>
     1bc:	81 30       	cpi	r24, 0x01	; 1
     1be:	21 f4       	brne	.+8      	; 0x1c8 <app_Start+0x1e>
	
		 adjust_Welcome();
     1c0:	0e 94 50 00 	call	0xa0	; 0xa0 <adjust_Welcome>
		 adjust_stage();
     1c4:	0e 94 81 00 	call	0x102	; 0x102 <adjust_stage>
		
	 
	}
	
		
	 if (g_flagStage == 2 ){
     1c8:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <g_flagStage>
     1cc:	82 30       	cpi	r24, 0x02	; 2
     1ce:	11 f4       	brne	.+4      	; 0x1d4 <app_Start+0x2a>
			//set
			
		 LCD_Clear();
     1d0:	0e 94 3a 03 	call	0x674	; 0x674 <LCD_Clear>
     1d4:	08 95       	ret

000001d6 <KEYPAD_init>:
 *  Author: moham
 */ 
#include "keypad.h"


void KEYPAD_init(void){
     1d6:	cf 93       	push	r28
	
	for (uint8_t row_pins = FIRST_ROW_PIN ; row_pins <= LAST_ROW_PIN ; row_pins++)
     1d8:	c0 e0       	ldi	r28, 0x00	; 0
     1da:	09 c0       	rjmp	.+18     	; 0x1ee <KEYPAD_init+0x18>
	{
		DIO_INITPIN(row_pins,OUTPUT);
     1dc:	60 e0       	ldi	r22, 0x00	; 0
     1de:	8c 2f       	mov	r24, r28
     1e0:	0e 94 55 03 	call	0x6aa	; 0x6aa <DIO_INITPIN>
		DIO_WRITEPIN(row_pins,HIGH);
     1e4:	61 e0       	ldi	r22, 0x01	; 1
     1e6:	8c 2f       	mov	r24, r28
     1e8:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_WRITEPIN>
#include "keypad.h"


void KEYPAD_init(void){
	
	for (uint8_t row_pins = FIRST_ROW_PIN ; row_pins <= LAST_ROW_PIN ; row_pins++)
     1ec:	cf 5f       	subi	r28, 0xFF	; 255
     1ee:	c3 30       	cpi	r28, 0x03	; 3
     1f0:	a8 f3       	brcs	.-22     	; 0x1dc <KEYPAD_init+0x6>
     1f2:	c3 e0       	ldi	r28, 0x03	; 3
     1f4:	05 c0       	rjmp	.+10     	; 0x200 <KEYPAD_init+0x2a>
		DIO_WRITEPIN(row_pins,HIGH);
	}
	
	for (uint8_t col_pins = FIRST_COL_PIN ; col_pins <= LAST_COL_PIN ; col_pins++)
	{
		DIO_INITPIN(col_pins,INPLUP);
     1f6:	62 e0       	ldi	r22, 0x02	; 2
     1f8:	8c 2f       	mov	r24, r28
     1fa:	0e 94 55 03 	call	0x6aa	; 0x6aa <DIO_INITPIN>
	{
		DIO_INITPIN(row_pins,OUTPUT);
		DIO_WRITEPIN(row_pins,HIGH);
	}
	
	for (uint8_t col_pins = FIRST_COL_PIN ; col_pins <= LAST_COL_PIN ; col_pins++)
     1fe:	cf 5f       	subi	r28, 0xFF	; 255
     200:	c6 30       	cpi	r28, 0x06	; 6
     202:	c8 f3       	brcs	.-14     	; 0x1f6 <KEYPAD_init+0x20>
		

	}
	
	
}
     204:	cf 91       	pop	r28
     206:	08 95       	ret

00000208 <KEYPAD_getKey>:





uint8_t KEYPAD_getKey(){
     208:	ff 92       	push	r15
     20a:	0f 93       	push	r16
     20c:	1f 93       	push	r17
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	1f 92       	push	r1
     214:	cd b7       	in	r28, 0x3d	; 61
     216:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t col_state =1 ;
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	89 83       	std	Y+1, r24	; 0x01
	uint8_t  keychar ;
	for (uint8_t rows = FIRST_ROW_PIN ; rows <= LAST_ROW_PIN ; rows ++)
     21c:	00 e0       	ldi	r16, 0x00	; 0
     21e:	ae c0       	rjmp	.+348    	; 0x37c <KEYPAD_getKey+0x174>
	{
		
		DIO_WRITEPIN(rows,LOW);
     220:	60 e0       	ldi	r22, 0x00	; 0
     222:	80 2f       	mov	r24, r16
     224:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_WRITEPIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     228:	87 e8       	ldi	r24, 0x87	; 135
     22a:	93 e1       	ldi	r25, 0x13	; 19
     22c:	01 97       	sbiw	r24, 0x01	; 1
     22e:	f1 f7       	brne	.-4      	; 0x22c <KEYPAD_getKey+0x24>
     230:	00 c0       	rjmp	.+0      	; 0x232 <KEYPAD_getKey+0x2a>
     232:	00 00       	nop
		_delay_ms(20);
		
		for(uint8_t cols = FIRST_COL_PIN ; cols <= LAST_COL_PIN ; cols++){
     234:	13 e0       	ldi	r17, 0x03	; 3
     236:	9a c0       	rjmp	.+308    	; 0x36c <KEYPAD_getKey+0x164>
			DIO_READPIN(cols,&col_state);
     238:	be 01       	movw	r22, r28
     23a:	6f 5f       	subi	r22, 0xFF	; 255
     23c:	7f 4f       	sbci	r23, 0xFF	; 255
     23e:	81 2f       	mov	r24, r17
     240:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <DIO_READPIN>
	
			while(col_state == 0){
     244:	8e c0       	rjmp	.+284    	; 0x362 <KEYPAD_getKey+0x15a>
				DIO_READPIN(cols,&col_state);
     246:	be 01       	movw	r22, r28
     248:	6f 5f       	subi	r22, 0xFF	; 255
     24a:	7f 4f       	sbci	r23, 0xFF	; 255
     24c:	81 2f       	mov	r24, r17
     24e:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <DIO_READPIN>
				
				
				switch(rows){
     252:	01 30       	cpi	r16, 0x01	; 1
     254:	11 f1       	breq	.+68     	; 0x29a <KEYPAD_getKey+0x92>
     256:	30 f0       	brcs	.+12     	; 0x264 <KEYPAD_getKey+0x5c>
     258:	02 30       	cpi	r16, 0x02	; 2
     25a:	d1 f1       	breq	.+116    	; 0x2d0 <KEYPAD_getKey+0xc8>
     25c:	03 30       	cpi	r16, 0x03	; 3
     25e:	09 f4       	brne	.+2      	; 0x262 <KEYPAD_getKey+0x5a>
     260:	51 c0       	rjmp	.+162    	; 0x304 <KEYPAD_getKey+0xfc>
     262:	6a c0       	rjmp	.+212    	; 0x338 <KEYPAD_getKey+0x130>
				
					case ROW_0 :
						
						switch(cols){
     264:	14 30       	cpi	r17, 0x04	; 4
     266:	51 f0       	breq	.+20     	; 0x27c <KEYPAD_getKey+0x74>
     268:	20 f4       	brcc	.+8      	; 0x272 <KEYPAD_getKey+0x6a>
     26a:	13 30       	cpi	r17, 0x03	; 3
     26c:	09 f4       	brne	.+2      	; 0x270 <KEYPAD_getKey+0x68>
     26e:	66 c0       	rjmp	.+204    	; 0x33c <KEYPAD_getKey+0x134>
     270:	78 c0       	rjmp	.+240    	; 0x362 <KEYPAD_getKey+0x15a>
     272:	15 30       	cpi	r17, 0x05	; 5
     274:	41 f0       	breq	.+16     	; 0x286 <KEYPAD_getKey+0x7e>
     276:	16 30       	cpi	r17, 0x06	; 6
     278:	59 f0       	breq	.+22     	; 0x290 <KEYPAD_getKey+0x88>
     27a:	73 c0       	rjmp	.+230    	; 0x362 <KEYPAD_getKey+0x15a>
							case COL_0 :
							keychar= KEYPAD_ROW_0_COLUMN_0 ;
							break;
							
							case COL_1 :
							keychar = KEYPAD_ROW_0_COLUMN_1;
     27c:	0f 2e       	mov	r0, r31
     27e:	f8 e3       	ldi	r31, 0x38	; 56
     280:	ff 2e       	mov	r15, r31
     282:	f0 2d       	mov	r31, r0
							break;
     284:	6e c0       	rjmp	.+220    	; 0x362 <KEYPAD_getKey+0x15a>
							
							case COL_2 :
							keychar= KEYPAD_ROW_0_COLUMN_2;
     286:	0f 2e       	mov	r0, r31
     288:	f9 e3       	ldi	r31, 0x39	; 57
     28a:	ff 2e       	mov	r15, r31
     28c:	f0 2d       	mov	r31, r0
							break;
     28e:	69 c0       	rjmp	.+210    	; 0x362 <KEYPAD_getKey+0x15a>
							
							case COL_3 :
							keychar = KEYPAD_ROW_0_COLUMN_3;
     290:	0f 2e       	mov	r0, r31
     292:	ff e2       	ldi	r31, 0x2F	; 47
     294:	ff 2e       	mov	r15, r31
     296:	f0 2d       	mov	r31, r0
							break;
     298:	64 c0       	rjmp	.+200    	; 0x362 <KEYPAD_getKey+0x15a>
						
						
						
				  case ROW_1 :
						
					switch(cols){
     29a:	14 30       	cpi	r17, 0x04	; 4
     29c:	51 f0       	breq	.+20     	; 0x2b2 <KEYPAD_getKey+0xaa>
     29e:	20 f4       	brcc	.+8      	; 0x2a8 <KEYPAD_getKey+0xa0>
     2a0:	13 30       	cpi	r17, 0x03	; 3
     2a2:	09 f4       	brne	.+2      	; 0x2a6 <KEYPAD_getKey+0x9e>
     2a4:	50 c0       	rjmp	.+160    	; 0x346 <KEYPAD_getKey+0x13e>
     2a6:	5d c0       	rjmp	.+186    	; 0x362 <KEYPAD_getKey+0x15a>
     2a8:	15 30       	cpi	r17, 0x05	; 5
     2aa:	41 f0       	breq	.+16     	; 0x2bc <KEYPAD_getKey+0xb4>
     2ac:	16 30       	cpi	r17, 0x06	; 6
     2ae:	59 f0       	breq	.+22     	; 0x2c6 <KEYPAD_getKey+0xbe>
     2b0:	58 c0       	rjmp	.+176    	; 0x362 <KEYPAD_getKey+0x15a>
							case COL_0 :
							keychar= KEYPAD_ROW_1_COLUMN_0 ;
							break;
							
							case COL_1 :
							keychar = KEYPAD_ROW_1_COLUMN_1;
     2b2:	0f 2e       	mov	r0, r31
     2b4:	f5 e3       	ldi	r31, 0x35	; 53
     2b6:	ff 2e       	mov	r15, r31
     2b8:	f0 2d       	mov	r31, r0
							break;
     2ba:	53 c0       	rjmp	.+166    	; 0x362 <KEYPAD_getKey+0x15a>
							
							case COL_2 :
							keychar= KEYPAD_ROW_1_COLUMN_2;
     2bc:	0f 2e       	mov	r0, r31
     2be:	f6 e3       	ldi	r31, 0x36	; 54
     2c0:	ff 2e       	mov	r15, r31
     2c2:	f0 2d       	mov	r31, r0
							break;
     2c4:	4e c0       	rjmp	.+156    	; 0x362 <KEYPAD_getKey+0x15a>
							
							case COL_3 :
							keychar = KEYPAD_ROW_1_COLUMN_3;
     2c6:	0f 2e       	mov	r0, r31
     2c8:	fa e2       	ldi	r31, 0x2A	; 42
     2ca:	ff 2e       	mov	r15, r31
     2cc:	f0 2d       	mov	r31, r0
							break;
     2ce:	49 c0       	rjmp	.+146    	; 0x362 <KEYPAD_getKey+0x15a>
						
						
						
				  case ROW_2 :
						
					switch(cols){
     2d0:	14 30       	cpi	r17, 0x04	; 4
     2d2:	49 f0       	breq	.+18     	; 0x2e6 <KEYPAD_getKey+0xde>
     2d4:	18 f4       	brcc	.+6      	; 0x2dc <KEYPAD_getKey+0xd4>
     2d6:	13 30       	cpi	r17, 0x03	; 3
     2d8:	d9 f1       	breq	.+118    	; 0x350 <KEYPAD_getKey+0x148>
     2da:	43 c0       	rjmp	.+134    	; 0x362 <KEYPAD_getKey+0x15a>
     2dc:	15 30       	cpi	r17, 0x05	; 5
     2de:	41 f0       	breq	.+16     	; 0x2f0 <KEYPAD_getKey+0xe8>
     2e0:	16 30       	cpi	r17, 0x06	; 6
     2e2:	59 f0       	breq	.+22     	; 0x2fa <KEYPAD_getKey+0xf2>
     2e4:	3e c0       	rjmp	.+124    	; 0x362 <KEYPAD_getKey+0x15a>
							case COL_0 :
							keychar= KEYPAD_ROW_2_COLUMN_0 ;
							break;
							
							case COL_1 :
							keychar = KEYPAD_ROW_2_COLUMN_1;
     2e6:	0f 2e       	mov	r0, r31
     2e8:	f2 e3       	ldi	r31, 0x32	; 50
     2ea:	ff 2e       	mov	r15, r31
     2ec:	f0 2d       	mov	r31, r0
							break;
     2ee:	39 c0       	rjmp	.+114    	; 0x362 <KEYPAD_getKey+0x15a>
							
							case COL_2 :
							keychar= KEYPAD_ROW_2_COLUMN_2;
     2f0:	0f 2e       	mov	r0, r31
     2f2:	f3 e3       	ldi	r31, 0x33	; 51
     2f4:	ff 2e       	mov	r15, r31
     2f6:	f0 2d       	mov	r31, r0
							break;
     2f8:	34 c0       	rjmp	.+104    	; 0x362 <KEYPAD_getKey+0x15a>
							
							case COL_3 :
							keychar = KEYPAD_ROW_2_COLUMN_3;
     2fa:	0f 2e       	mov	r0, r31
     2fc:	fd e2       	ldi	r31, 0x2D	; 45
     2fe:	ff 2e       	mov	r15, r31
     300:	f0 2d       	mov	r31, r0
							break;
     302:	2f c0       	rjmp	.+94     	; 0x362 <KEYPAD_getKey+0x15a>
						
						
						
				  case ROW_3 :
						
				   switch(cols){
     304:	14 30       	cpi	r17, 0x04	; 4
     306:	49 f0       	breq	.+18     	; 0x31a <KEYPAD_getKey+0x112>
     308:	18 f4       	brcc	.+6      	; 0x310 <KEYPAD_getKey+0x108>
     30a:	13 30       	cpi	r17, 0x03	; 3
     30c:	31 f1       	breq	.+76     	; 0x35a <KEYPAD_getKey+0x152>
     30e:	29 c0       	rjmp	.+82     	; 0x362 <KEYPAD_getKey+0x15a>
     310:	15 30       	cpi	r17, 0x05	; 5
     312:	41 f0       	breq	.+16     	; 0x324 <KEYPAD_getKey+0x11c>
     314:	16 30       	cpi	r17, 0x06	; 6
     316:	59 f0       	breq	.+22     	; 0x32e <KEYPAD_getKey+0x126>
     318:	24 c0       	rjmp	.+72     	; 0x362 <KEYPAD_getKey+0x15a>
							case COL_0 :
							keychar= KEYPAD_ROW_3_COLUMN_0 ;
							break;
							
							case COL_1 :
							keychar = KEYPAD_ROW_3_COLUMN_1;
     31a:	0f 2e       	mov	r0, r31
     31c:	f0 e3       	ldi	r31, 0x30	; 48
     31e:	ff 2e       	mov	r15, r31
     320:	f0 2d       	mov	r31, r0
							break;
     322:	1f c0       	rjmp	.+62     	; 0x362 <KEYPAD_getKey+0x15a>
							
							case COL_2 :
							keychar= KEYPAD_ROW_3_COLUMN_2;
     324:	0f 2e       	mov	r0, r31
     326:	fd e3       	ldi	r31, 0x3D	; 61
     328:	ff 2e       	mov	r15, r31
     32a:	f0 2d       	mov	r31, r0
							break;
     32c:	1a c0       	rjmp	.+52     	; 0x362 <KEYPAD_getKey+0x15a>
							
							case COL_3 :
							keychar = KEYPAD_ROW_3_COLUMN_3;
     32e:	0f 2e       	mov	r0, r31
     330:	fb e2       	ldi	r31, 0x2B	; 43
     332:	ff 2e       	mov	r15, r31
     334:	f0 2d       	mov	r31, r0
							break;
     336:	15 c0       	rjmp	.+42     	; 0x362 <KEYPAD_getKey+0x15a>
						
						

						
			default: 
			keychar = 0;
     338:	f1 2c       	mov	r15, r1
     33a:	13 c0       	rjmp	.+38     	; 0x362 <KEYPAD_getKey+0x15a>
					case ROW_0 :
						
						switch(cols){
							
							case COL_0 :
							keychar= KEYPAD_ROW_0_COLUMN_0 ;
     33c:	0f 2e       	mov	r0, r31
     33e:	f7 e3       	ldi	r31, 0x37	; 55
     340:	ff 2e       	mov	r15, r31
     342:	f0 2d       	mov	r31, r0
     344:	0e c0       	rjmp	.+28     	; 0x362 <KEYPAD_getKey+0x15a>
				  case ROW_1 :
						
					switch(cols){
							
							case COL_0 :
							keychar= KEYPAD_ROW_1_COLUMN_0 ;
     346:	0f 2e       	mov	r0, r31
     348:	f4 e3       	ldi	r31, 0x34	; 52
     34a:	ff 2e       	mov	r15, r31
     34c:	f0 2d       	mov	r31, r0
     34e:	09 c0       	rjmp	.+18     	; 0x362 <KEYPAD_getKey+0x15a>
				  case ROW_2 :
						
					switch(cols){
							
							case COL_0 :
							keychar= KEYPAD_ROW_2_COLUMN_0 ;
     350:	0f 2e       	mov	r0, r31
     352:	f1 e3       	ldi	r31, 0x31	; 49
     354:	ff 2e       	mov	r15, r31
     356:	f0 2d       	mov	r31, r0
     358:	04 c0       	rjmp	.+8      	; 0x362 <KEYPAD_getKey+0x15a>
				  case ROW_3 :
						
				   switch(cols){
							
							case COL_0 :
							keychar= KEYPAD_ROW_3_COLUMN_0 ;
     35a:	0f 2e       	mov	r0, r31
     35c:	f1 e4       	ldi	r31, 0x41	; 65
     35e:	ff 2e       	mov	r15, r31
     360:	f0 2d       	mov	r31, r0
		_delay_ms(20);
		
		for(uint8_t cols = FIRST_COL_PIN ; cols <= LAST_COL_PIN ; cols++){
			DIO_READPIN(cols,&col_state);
	
			while(col_state == 0){
     362:	89 81       	ldd	r24, Y+1	; 0x01
     364:	88 23       	and	r24, r24
     366:	09 f4       	brne	.+2      	; 0x36a <KEYPAD_getKey+0x162>
     368:	6e cf       	rjmp	.-292    	; 0x246 <KEYPAD_getKey+0x3e>
	{
		
		DIO_WRITEPIN(rows,LOW);
		_delay_ms(20);
		
		for(uint8_t cols = FIRST_COL_PIN ; cols <= LAST_COL_PIN ; cols++){
     36a:	1f 5f       	subi	r17, 0xFF	; 255
     36c:	16 30       	cpi	r17, 0x06	; 6
     36e:	08 f4       	brcc	.+2      	; 0x372 <KEYPAD_getKey+0x16a>
     370:	63 cf       	rjmp	.-314    	; 0x238 <KEYPAD_getKey+0x30>
				}
			
		}
		
		
		DIO_WRITEPIN(rows,HIGH);
     372:	61 e0       	ldi	r22, 0x01	; 1
     374:	80 2f       	mov	r24, r16
     376:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_WRITEPIN>

uint8_t KEYPAD_getKey(){
	
	uint8_t col_state =1 ;
	uint8_t  keychar ;
	for (uint8_t rows = FIRST_ROW_PIN ; rows <= LAST_ROW_PIN ; rows ++)
     37a:	0f 5f       	subi	r16, 0xFF	; 255
     37c:	03 30       	cpi	r16, 0x03	; 3
     37e:	08 f4       	brcc	.+2      	; 0x382 <KEYPAD_getKey+0x17a>
     380:	4f cf       	rjmp	.-354    	; 0x220 <KEYPAD_getKey+0x18>
		DIO_WRITEPIN(rows,HIGH);
		
	}
	
	return keychar ;
     382:	8f 2d       	mov	r24, r15
     384:	0f 90       	pop	r0
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	1f 91       	pop	r17
     38c:	0f 91       	pop	r16
     38e:	ff 90       	pop	r15
     390:	08 95       	ret

00000392 <LCD_WRITE_COMMAND>:
/*************************************************************************************************
                                     4_bit_mode
*****************************************************************************************************/

void LCD_WRITE_COMMAND(uint8_t a_COMMAND)
{
     392:	cf 93       	push	r28
     394:	c8 2f       	mov	r28, r24
	DIO_WRITEPIN(RS,LOW);
     396:	60 e0       	ldi	r22, 0x00	; 0
     398:	88 e1       	ldi	r24, 0x18	; 24
     39a:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_WRITEPIN>
	DIO_WRITEPIN(RW,LOW);
     39e:	60 e0       	ldi	r22, 0x00	; 0
     3a0:	89 e1       	ldi	r24, 0x19	; 25
     3a2:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_WRITEPIN>
	/**for the 4 most significant bits**/
	DIO_WRITEPIN(D4,read_bit(a_COMMAND,4));
     3a6:	c4 fb       	bst	r28, 4
     3a8:	66 27       	eor	r22, r22
     3aa:	60 f9       	bld	r22, 0
     3ac:	80 e1       	ldi	r24, 0x10	; 16
     3ae:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_WRITEPIN>
	DIO_WRITEPIN(D5,read_bit(a_COMMAND,5));
     3b2:	c5 fb       	bst	r28, 5
     3b4:	66 27       	eor	r22, r22
     3b6:	60 f9       	bld	r22, 0
     3b8:	81 e1       	ldi	r24, 0x11	; 17
     3ba:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_WRITEPIN>
	DIO_WRITEPIN(D6,read_bit(a_COMMAND,6));
     3be:	c6 fb       	bst	r28, 6
     3c0:	66 27       	eor	r22, r22
     3c2:	60 f9       	bld	r22, 0
     3c4:	82 e1       	ldi	r24, 0x12	; 18
     3c6:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_WRITEPIN>
	DIO_WRITEPIN(D7,read_bit(a_COMMAND,7));
     3ca:	6c 2f       	mov	r22, r28
     3cc:	66 1f       	adc	r22, r22
     3ce:	66 27       	eor	r22, r22
     3d0:	66 1f       	adc	r22, r22
     3d2:	83 e1       	ldi	r24, 0x13	; 19
     3d4:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_WRITEPIN>
	DIO_WRITEPIN(EN,HIGH);
     3d8:	61 e0       	ldi	r22, 0x01	; 1
     3da:	8a e1       	ldi	r24, 0x1A	; 26
     3dc:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_WRITEPIN>
     3e0:	89 ef       	ldi	r24, 0xF9	; 249
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	01 97       	sbiw	r24, 0x01	; 1
     3e6:	f1 f7       	brne	.-4      	; 0x3e4 <LCD_WRITE_COMMAND+0x52>
     3e8:	00 c0       	rjmp	.+0      	; 0x3ea <LCD_WRITE_COMMAND+0x58>
     3ea:	00 00       	nop
	_delay_ms(1);
	DIO_WRITEPIN(EN,LOW);
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	8a e1       	ldi	r24, 0x1A	; 26
     3f0:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_WRITEPIN>
     3f4:	89 ef       	ldi	r24, 0xF9	; 249
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	01 97       	sbiw	r24, 0x01	; 1
     3fa:	f1 f7       	brne	.-4      	; 0x3f8 <LCD_WRITE_COMMAND+0x66>
     3fc:	00 c0       	rjmp	.+0      	; 0x3fe <LCD_WRITE_COMMAND+0x6c>
     3fe:	00 00       	nop
	_delay_ms(1);
	/**for the 4 least significant bits**/
	DIO_WRITEPIN(D4,read_bit(a_COMMAND,0));
     400:	6c 2f       	mov	r22, r28
     402:	61 70       	andi	r22, 0x01	; 1
     404:	80 e1       	ldi	r24, 0x10	; 16
     406:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_WRITEPIN>
	DIO_WRITEPIN(D5,read_bit(a_COMMAND,1));
     40a:	c1 fb       	bst	r28, 1
     40c:	66 27       	eor	r22, r22
     40e:	60 f9       	bld	r22, 0
     410:	81 e1       	ldi	r24, 0x11	; 17
     412:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_WRITEPIN>
	DIO_WRITEPIN(D6,read_bit(a_COMMAND,2));
     416:	c2 fb       	bst	r28, 2
     418:	66 27       	eor	r22, r22
     41a:	60 f9       	bld	r22, 0
     41c:	82 e1       	ldi	r24, 0x12	; 18
     41e:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_WRITEPIN>
	DIO_WRITEPIN(D7,read_bit(a_COMMAND,3));
     422:	c3 fb       	bst	r28, 3
     424:	66 27       	eor	r22, r22
     426:	60 f9       	bld	r22, 0
     428:	83 e1       	ldi	r24, 0x13	; 19
     42a:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_WRITEPIN>
	DIO_WRITEPIN(EN,HIGH);
     42e:	61 e0       	ldi	r22, 0x01	; 1
     430:	8a e1       	ldi	r24, 0x1A	; 26
     432:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_WRITEPIN>
     436:	89 ef       	ldi	r24, 0xF9	; 249
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	01 97       	sbiw	r24, 0x01	; 1
     43c:	f1 f7       	brne	.-4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
     43e:	00 c0       	rjmp	.+0      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
     440:	00 00       	nop
	_delay_ms(1);
	DIO_WRITEPIN(EN,LOW);
     442:	60 e0       	ldi	r22, 0x00	; 0
     444:	8a e1       	ldi	r24, 0x1A	; 26
     446:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_WRITEPIN>
     44a:	89 ef       	ldi	r24, 0xF9	; 249
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	01 97       	sbiw	r24, 0x01	; 1
     450:	f1 f7       	brne	.-4      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
     452:	00 c0       	rjmp	.+0      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
     454:	00 00       	nop
	_delay_ms(1);
}
     456:	cf 91       	pop	r28
     458:	08 95       	ret

0000045a <LCD_WRITE_DATA>:

/*************************************************************************************************************************/

void LCD_WRITE_DATA(uint8_t a_DATA)
{
     45a:	cf 93       	push	r28
     45c:	c8 2f       	mov	r28, r24
	DIO_WRITEPIN(RS,HIGH);
     45e:	61 e0       	ldi	r22, 0x01	; 1
     460:	88 e1       	ldi	r24, 0x18	; 24
     462:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_WRITEPIN>
	DIO_WRITEPIN(RW,LOW);
     466:	60 e0       	ldi	r22, 0x00	; 0
     468:	89 e1       	ldi	r24, 0x19	; 25
     46a:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_WRITEPIN>
	/**for the 4 most significant bits**/
	DIO_WRITEPIN(D4,read_bit(a_DATA,4));
     46e:	c4 fb       	bst	r28, 4
     470:	66 27       	eor	r22, r22
     472:	60 f9       	bld	r22, 0
     474:	80 e1       	ldi	r24, 0x10	; 16
     476:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_WRITEPIN>
	DIO_WRITEPIN(D5,read_bit(a_DATA,5));
     47a:	c5 fb       	bst	r28, 5
     47c:	66 27       	eor	r22, r22
     47e:	60 f9       	bld	r22, 0
     480:	81 e1       	ldi	r24, 0x11	; 17
     482:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_WRITEPIN>
	DIO_WRITEPIN(D6,read_bit(a_DATA,6));
     486:	c6 fb       	bst	r28, 6
     488:	66 27       	eor	r22, r22
     48a:	60 f9       	bld	r22, 0
     48c:	82 e1       	ldi	r24, 0x12	; 18
     48e:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_WRITEPIN>
	DIO_WRITEPIN(D7,read_bit(a_DATA,7));
     492:	6c 2f       	mov	r22, r28
     494:	66 1f       	adc	r22, r22
     496:	66 27       	eor	r22, r22
     498:	66 1f       	adc	r22, r22
     49a:	83 e1       	ldi	r24, 0x13	; 19
     49c:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_WRITEPIN>
	DIO_WRITEPIN(EN,HIGH);
     4a0:	61 e0       	ldi	r22, 0x01	; 1
     4a2:	8a e1       	ldi	r24, 0x1A	; 26
     4a4:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_WRITEPIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4a8:	00 00       	nop
	_delay_us(1);
	DIO_WRITEPIN(EN,LOW);
     4aa:	60 e0       	ldi	r22, 0x00	; 0
     4ac:	8a e1       	ldi	r24, 0x1A	; 26
     4ae:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_WRITEPIN>
     4b2:	82 e4       	ldi	r24, 0x42	; 66
     4b4:	8a 95       	dec	r24
     4b6:	f1 f7       	brne	.-4      	; 0x4b4 <LCD_WRITE_DATA+0x5a>
     4b8:	00 c0       	rjmp	.+0      	; 0x4ba <LCD_WRITE_DATA+0x60>
	_delay_us(200);
	/**for the 4 least significant bits**/
	DIO_WRITEPIN(D4,read_bit(a_DATA,0));
     4ba:	6c 2f       	mov	r22, r28
     4bc:	61 70       	andi	r22, 0x01	; 1
     4be:	80 e1       	ldi	r24, 0x10	; 16
     4c0:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_WRITEPIN>
	DIO_WRITEPIN(D5,read_bit(a_DATA,1));
     4c4:	c1 fb       	bst	r28, 1
     4c6:	66 27       	eor	r22, r22
     4c8:	60 f9       	bld	r22, 0
     4ca:	81 e1       	ldi	r24, 0x11	; 17
     4cc:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_WRITEPIN>
	DIO_WRITEPIN(D6,read_bit(a_DATA,2));
     4d0:	c2 fb       	bst	r28, 2
     4d2:	66 27       	eor	r22, r22
     4d4:	60 f9       	bld	r22, 0
     4d6:	82 e1       	ldi	r24, 0x12	; 18
     4d8:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_WRITEPIN>
	DIO_WRITEPIN(D7,read_bit(a_DATA,3));
     4dc:	c3 fb       	bst	r28, 3
     4de:	66 27       	eor	r22, r22
     4e0:	60 f9       	bld	r22, 0
     4e2:	83 e1       	ldi	r24, 0x13	; 19
     4e4:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_WRITEPIN>
	DIO_WRITEPIN(EN,HIGH);
     4e8:	61 e0       	ldi	r22, 0x01	; 1
     4ea:	8a e1       	ldi	r24, 0x1A	; 26
     4ec:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_WRITEPIN>
     4f0:	00 00       	nop
	_delay_us(1);
	DIO_WRITEPIN(EN,LOW);
     4f2:	60 e0       	ldi	r22, 0x00	; 0
     4f4:	8a e1       	ldi	r24, 0x1A	; 26
     4f6:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_WRITEPIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4fa:	83 ef       	ldi	r24, 0xF3	; 243
     4fc:	91 e0       	ldi	r25, 0x01	; 1
     4fe:	01 97       	sbiw	r24, 0x01	; 1
     500:	f1 f7       	brne	.-4      	; 0x4fe <LCD_WRITE_DATA+0xa4>
     502:	00 c0       	rjmp	.+0      	; 0x504 <LCD_WRITE_DATA+0xaa>
     504:	00 00       	nop
	_delay_ms(2);
}
     506:	cf 91       	pop	r28
     508:	08 95       	ret

0000050a <LCD_INIT>:
/*************************************************************************************************************************/

void LCD_INIT(void)
{
	DIO_INITPIN(pinc0,OUTPUT);
     50a:	60 e0       	ldi	r22, 0x00	; 0
     50c:	80 e1       	ldi	r24, 0x10	; 16
     50e:	0e 94 55 03 	call	0x6aa	; 0x6aa <DIO_INITPIN>
	DIO_INITPIN(pinc1,OUTPUT);
     512:	60 e0       	ldi	r22, 0x00	; 0
     514:	81 e1       	ldi	r24, 0x11	; 17
     516:	0e 94 55 03 	call	0x6aa	; 0x6aa <DIO_INITPIN>
	DIO_INITPIN(pinc2,OUTPUT);
     51a:	60 e0       	ldi	r22, 0x00	; 0
     51c:	82 e1       	ldi	r24, 0x12	; 18
     51e:	0e 94 55 03 	call	0x6aa	; 0x6aa <DIO_INITPIN>
	DIO_INITPIN(pinc3,OUTPUT);
     522:	60 e0       	ldi	r22, 0x00	; 0
     524:	83 e1       	ldi	r24, 0x13	; 19
     526:	0e 94 55 03 	call	0x6aa	; 0x6aa <DIO_INITPIN>
	
	DIO_INITPIN(pind0,OUTPUT);
     52a:	60 e0       	ldi	r22, 0x00	; 0
     52c:	88 e1       	ldi	r24, 0x18	; 24
     52e:	0e 94 55 03 	call	0x6aa	; 0x6aa <DIO_INITPIN>
	DIO_INITPIN(pind1,OUTPUT);
     532:	60 e0       	ldi	r22, 0x00	; 0
     534:	89 e1       	ldi	r24, 0x19	; 25
     536:	0e 94 55 03 	call	0x6aa	; 0x6aa <DIO_INITPIN>
	DIO_INITPIN(pind2,OUTPUT);
     53a:	60 e0       	ldi	r22, 0x00	; 0
     53c:	8a e1       	ldi	r24, 0x1A	; 26
     53e:	0e 94 55 03 	call	0x6aa	; 0x6aa <DIO_INITPIN>
     542:	83 ed       	ldi	r24, 0xD3	; 211
     544:	90 e3       	ldi	r25, 0x30	; 48
     546:	01 97       	sbiw	r24, 0x01	; 1
     548:	f1 f7       	brne	.-4      	; 0x546 <LCD_INIT+0x3c>
     54a:	00 c0       	rjmp	.+0      	; 0x54c <LCD_INIT+0x42>
     54c:	00 00       	nop
	
	_delay_ms(50);
	LCD_WRITE_COMMAND(0x02);
     54e:	82 e0       	ldi	r24, 0x02	; 2
     550:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_WRITE_COMMAND>
     554:	89 ef       	ldi	r24, 0xF9	; 249
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	01 97       	sbiw	r24, 0x01	; 1
     55a:	f1 f7       	brne	.-4      	; 0x558 <LCD_INIT+0x4e>
     55c:	00 c0       	rjmp	.+0      	; 0x55e <LCD_INIT+0x54>
     55e:	00 00       	nop
	_delay_ms(1);
	LCD_WRITE_COMMAND(0X28);                     /* THIS IS FOR FUNCTION SET IN THE DATA SHEET  4BIT MODE, 2LINE, 5*7*/
     560:	88 e2       	ldi	r24, 0x28	; 40
     562:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_WRITE_COMMAND>
     566:	89 ef       	ldi	r24, 0xF9	; 249
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	01 97       	sbiw	r24, 0x01	; 1
     56c:	f1 f7       	brne	.-4      	; 0x56a <LCD_INIT+0x60>
     56e:	00 c0       	rjmp	.+0      	; 0x570 <LCD_INIT+0x66>
     570:	00 00       	nop
	_delay_ms(1);
	LCD_WRITE_COMMAND(0x0c);                     /*SCREEN ON, CURSOR OFF*/
     572:	8c e0       	ldi	r24, 0x0C	; 12
     574:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_WRITE_COMMAND>
     578:	89 ef       	ldi	r24, 0xF9	; 249
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	01 97       	sbiw	r24, 0x01	; 1
     57e:	f1 f7       	brne	.-4      	; 0x57c <LCD_INIT+0x72>
     580:	00 c0       	rjmp	.+0      	; 0x582 <LCD_INIT+0x78>
     582:	00 00       	nop
	_delay_ms(1);
	LCD_WRITE_COMMAND(0X01);                      /*CLEAR SCREEN*/
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_WRITE_COMMAND>
     58a:	83 ef       	ldi	r24, 0xF3	; 243
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	01 97       	sbiw	r24, 0x01	; 1
     590:	f1 f7       	brne	.-4      	; 0x58e <LCD_INIT+0x84>
     592:	00 c0       	rjmp	.+0      	; 0x594 <LCD_INIT+0x8a>
     594:	00 00       	nop
	_delay_ms(2);
	LCD_WRITE_COMMAND(0X06);
     596:	86 e0       	ldi	r24, 0x06	; 6
     598:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_WRITE_COMMAND>
     59c:	89 ef       	ldi	r24, 0xF9	; 249
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	01 97       	sbiw	r24, 0x01	; 1
     5a2:	f1 f7       	brne	.-4      	; 0x5a0 <LCD_INIT+0x96>
     5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <LCD_INIT+0x9c>
     5a6:	00 00       	nop
     5a8:	08 95       	ret

000005aa <LCD_Write_String>:
/**************************************************************************************************
                                   APIS for LCD
********************************************************************************************************/

void LCD_Write_String(uint8_t*a_String)
{
     5aa:	0f 93       	push	r16
     5ac:	1f 93       	push	r17
     5ae:	cf 93       	push	r28
     5b0:	8c 01       	movw	r16, r24
	uint8_t L_Index_i=0;
     5b2:	c0 e0       	ldi	r28, 0x00	; 0
	while(a_String[L_Index_i])
     5b4:	03 c0       	rjmp	.+6      	; 0x5bc <LCD_Write_String+0x12>
	{
		LCD_WRITE_DATA(a_String[L_Index_i]);
     5b6:	0e 94 2d 02 	call	0x45a	; 0x45a <LCD_WRITE_DATA>
		L_Index_i++;
     5ba:	cf 5f       	subi	r28, 0xFF	; 255
********************************************************************************************************/

void LCD_Write_String(uint8_t*a_String)
{
	uint8_t L_Index_i=0;
	while(a_String[L_Index_i])
     5bc:	f8 01       	movw	r30, r16
     5be:	ec 0f       	add	r30, r28
     5c0:	f1 1d       	adc	r31, r1
     5c2:	80 81       	ld	r24, Z
     5c4:	81 11       	cpse	r24, r1
     5c6:	f7 cf       	rjmp	.-18     	; 0x5b6 <LCD_Write_String+0xc>
	{
		LCD_WRITE_DATA(a_String[L_Index_i]);
		L_Index_i++;
	}
}
     5c8:	cf 91       	pop	r28
     5ca:	1f 91       	pop	r17
     5cc:	0f 91       	pop	r16
     5ce:	08 95       	ret

000005d0 <LCD_Write_Number>:
/********************************************************************************************/
void LCD_Write_Number(uint32_t a_number)
{
     5d0:	cf 92       	push	r12
     5d2:	df 92       	push	r13
     5d4:	ef 92       	push	r14
     5d6:	ff 92       	push	r15
     5d8:	1f 93       	push	r17
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	cd b7       	in	r28, 0x3d	; 61
     5e0:	de b7       	in	r29, 0x3e	; 62
     5e2:	60 97       	sbiw	r28, 0x10	; 16
     5e4:	0f b6       	in	r0, 0x3f	; 63
     5e6:	f8 94       	cli
     5e8:	de bf       	out	0x3e, r29	; 62
     5ea:	0f be       	out	0x3f, r0	; 63
     5ec:	cd bf       	out	0x3d, r28	; 61
     5ee:	6b 01       	movw	r12, r22
     5f0:	7c 01       	movw	r14, r24
	uint8_t L_Remainder=0,L_Arr[16],L_Index_i=0,L_Index_j;
	if (a_number==0)
     5f2:	67 2b       	or	r22, r23
     5f4:	68 2b       	or	r22, r24
     5f6:	69 2b       	or	r22, r25
     5f8:	19 f4       	brne	.+6      	; 0x600 <LCD_Write_Number+0x30>
	{
		LCD_WRITE_DATA('0');
     5fa:	80 e3       	ldi	r24, 0x30	; 48
     5fc:	0e 94 2d 02 	call	0x45a	; 0x45a <LCD_WRITE_DATA>
		L_Index_i++;
	}
}
/********************************************************************************************/
void LCD_Write_Number(uint32_t a_number)
{
     600:	10 e0       	ldi	r17, 0x00	; 0
     602:	15 c0       	rjmp	.+42     	; 0x62e <LCD_Write_Number+0x5e>
	{
		LCD_WRITE_DATA('0');
	}
	while(a_number>0)
	{
	L_Remainder=a_number%10;
     604:	c7 01       	movw	r24, r14
     606:	b6 01       	movw	r22, r12
     608:	2a e0       	ldi	r18, 0x0A	; 10
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	40 e0       	ldi	r20, 0x00	; 0
     60e:	50 e0       	ldi	r21, 0x00	; 0
     610:	0e 94 a5 09 	call	0x134a	; 0x134a <__udivmodsi4>
	L_Arr[L_Index_i]=L_Remainder+'0';    /*tp display the number it self, when we add the zero asci it shits the number to it's asci*/
     614:	e1 e0       	ldi	r30, 0x01	; 1
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	ec 0f       	add	r30, r28
     61a:	fd 1f       	adc	r31, r29
     61c:	e1 0f       	add	r30, r17
     61e:	f1 1d       	adc	r31, r1
     620:	60 5d       	subi	r22, 0xD0	; 208
     622:	60 83       	st	Z, r22
	L_Index_i++;
     624:	1f 5f       	subi	r17, 0xFF	; 255
	a_number/=10;
     626:	c2 2e       	mov	r12, r18
     628:	d3 2e       	mov	r13, r19
     62a:	e4 2e       	mov	r14, r20
     62c:	f5 2e       	mov	r15, r21
	uint8_t L_Remainder=0,L_Arr[16],L_Index_i=0,L_Index_j;
	if (a_number==0)
	{
		LCD_WRITE_DATA('0');
	}
	while(a_number>0)
     62e:	c1 14       	cp	r12, r1
     630:	d1 04       	cpc	r13, r1
     632:	e1 04       	cpc	r14, r1
     634:	f1 04       	cpc	r15, r1
     636:	31 f7       	brne	.-52     	; 0x604 <LCD_Write_Number+0x34>
     638:	0d c0       	rjmp	.+26     	; 0x654 <LCD_Write_Number+0x84>
	a_number/=10;
	}
	
	for (L_Index_j=L_Index_i;L_Index_j>0;L_Index_j--)    /*to display the array of number */
	{
		LCD_WRITE_DATA(L_Arr[L_Index_j-1]);
     63a:	e1 2f       	mov	r30, r17
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	31 97       	sbiw	r30, 0x01	; 1
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	8c 0f       	add	r24, r28
     646:	9d 1f       	adc	r25, r29
     648:	e8 0f       	add	r30, r24
     64a:	f9 1f       	adc	r31, r25
     64c:	80 81       	ld	r24, Z
     64e:	0e 94 2d 02 	call	0x45a	; 0x45a <LCD_WRITE_DATA>
	L_Arr[L_Index_i]=L_Remainder+'0';    /*tp display the number it self, when we add the zero asci it shits the number to it's asci*/
	L_Index_i++;
	a_number/=10;
	}
	
	for (L_Index_j=L_Index_i;L_Index_j>0;L_Index_j--)    /*to display the array of number */
     652:	11 50       	subi	r17, 0x01	; 1
     654:	11 11       	cpse	r17, r1
     656:	f1 cf       	rjmp	.-30     	; 0x63a <LCD_Write_Number+0x6a>
	{
		LCD_WRITE_DATA(L_Arr[L_Index_j-1]);
	}
}
     658:	60 96       	adiw	r28, 0x10	; 16
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	f8 94       	cli
     65e:	de bf       	out	0x3e, r29	; 62
     660:	0f be       	out	0x3f, r0	; 63
     662:	cd bf       	out	0x3d, r28	; 61
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	1f 91       	pop	r17
     66a:	ff 90       	pop	r15
     66c:	ef 90       	pop	r14
     66e:	df 90       	pop	r13
     670:	cf 90       	pop	r12
     672:	08 95       	ret

00000674 <LCD_Clear>:

/**********************************************************************************************/
void LCD_Clear(void)
{
	LCD_WRITE_COMMAND(0x01);
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_WRITE_COMMAND>
     67a:	08 95       	ret

0000067c <LCD_GoTo>:

/**********************************************************************************************/
void LCD_GoTo(uint8_t a_line,uint8_t a_cell)
{
//0x80 this is from data sheet to write an address on the DDRAM"screen"*/
	if (a_line==1)
     67c:	81 30       	cpi	r24, 0x01	; 1
     67e:	29 f4       	brne	.+10     	; 0x68a <LCD_GoTo+0xe>
	{
		LCD_WRITE_COMMAND(0x80+a_cell);    /*0x80 means we ant to write an address and a_cell is the address we want*/
     680:	80 e8       	ldi	r24, 0x80	; 128
     682:	86 0f       	add	r24, r22
     684:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_WRITE_COMMAND>
     688:	08 95       	ret
	}
	else if (a_line==2)
     68a:	82 30       	cpi	r24, 0x02	; 2
     68c:	21 f4       	brne	.+8      	; 0x696 <LCD_GoTo+0x1a>
	{
		LCD_WRITE_COMMAND(0x80+0x40+a_cell);  /*0x40 to start from cell 0 at line 2 from the data sheet*/	
     68e:	80 ec       	ldi	r24, 0xC0	; 192
     690:	86 0f       	add	r24, r22
     692:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_WRITE_COMMAND>
     696:	08 95       	ret

00000698 <LCD_Write_Charecter>:

/********************************************************************************************/

void LCD_Write_Charecter(uint8_t a_char)
{
	if(a_char!=0){
     698:	81 11       	cpse	r24, r1
	LCD_WRITE_DATA(a_char);
     69a:	0e 94 2d 02 	call	0x45a	; 0x45a <LCD_WRITE_DATA>
     69e:	08 95       	ret

000006a0 <main>:

#include "APP/APP.h"

int main(void)
{
 app_Init();
     6a0:	0e 94 ce 00 	call	0x19c	; 0x19c <app_Init>
    while (1)
    {
	
		
	app_Start();
     6a4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <app_Start>
     6a8:	fd cf       	rjmp	.-6      	; 0x6a4 <main+0x4>

000006aa <DIO_INITPIN>:
     6aa:	98 2f       	mov	r25, r24
     6ac:	96 95       	lsr	r25
     6ae:	96 95       	lsr	r25
     6b0:	96 95       	lsr	r25
     6b2:	87 70       	andi	r24, 0x07	; 7
     6b4:	95 30       	cpi	r25, 0x05	; 5
     6b6:	08 f0       	brcs	.+2      	; 0x6ba <DIO_INITPIN+0x10>
     6b8:	f8 c0       	rjmp	.+496    	; 0x8aa <__stack+0x4b>
     6ba:	61 30       	cpi	r22, 0x01	; 1
     6bc:	31 f0       	breq	.+12     	; 0x6ca <DIO_INITPIN+0x20>
     6be:	08 f4       	brcc	.+2      	; 0x6c2 <DIO_INITPIN+0x18>
     6c0:	a4 c0       	rjmp	.+328    	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     6c2:	62 30       	cpi	r22, 0x02	; 2
     6c4:	09 f4       	brne	.+2      	; 0x6c8 <DIO_INITPIN+0x1e>
     6c6:	51 c0       	rjmp	.+162    	; 0x76a <DIO_INITPIN+0xc0>
     6c8:	ef c0       	rjmp	.+478    	; 0x8a8 <__stack+0x49>
     6ca:	91 30       	cpi	r25, 0x01	; 1
     6cc:	c1 f0       	breq	.+48     	; 0x6fe <DIO_INITPIN+0x54>
     6ce:	28 f0       	brcs	.+10     	; 0x6da <DIO_INITPIN+0x30>
     6d0:	92 30       	cpi	r25, 0x02	; 2
     6d2:	39 f1       	breq	.+78     	; 0x722 <DIO_INITPIN+0x78>
     6d4:	93 30       	cpi	r25, 0x03	; 3
     6d6:	b9 f1       	breq	.+110    	; 0x746 <DIO_INITPIN+0x9c>
     6d8:	e7 c0       	rjmp	.+462    	; 0x8a8 <__stack+0x49>
     6da:	4a b3       	in	r20, 0x1a	; 26
     6dc:	21 e0       	ldi	r18, 0x01	; 1
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	b9 01       	movw	r22, r18
     6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <DIO_INITPIN+0x3e>
     6e4:	66 0f       	add	r22, r22
     6e6:	77 1f       	adc	r23, r23
     6e8:	8a 95       	dec	r24
     6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <DIO_INITPIN+0x3a>
     6ec:	cb 01       	movw	r24, r22
     6ee:	80 95       	com	r24
     6f0:	94 2f       	mov	r25, r20
     6f2:	98 23       	and	r25, r24
     6f4:	9a bb       	out	0x1a, r25	; 26
     6f6:	9b b3       	in	r25, 0x1b	; 27
     6f8:	89 23       	and	r24, r25
     6fa:	8b bb       	out	0x1b, r24	; 27
     6fc:	d5 c0       	rjmp	.+426    	; 0x8a8 <__stack+0x49>
     6fe:	47 b3       	in	r20, 0x17	; 23
     700:	21 e0       	ldi	r18, 0x01	; 1
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	b9 01       	movw	r22, r18
     706:	02 c0       	rjmp	.+4      	; 0x70c <DIO_INITPIN+0x62>
     708:	66 0f       	add	r22, r22
     70a:	77 1f       	adc	r23, r23
     70c:	8a 95       	dec	r24
     70e:	e2 f7       	brpl	.-8      	; 0x708 <DIO_INITPIN+0x5e>
     710:	cb 01       	movw	r24, r22
     712:	80 95       	com	r24
     714:	94 2f       	mov	r25, r20
     716:	98 23       	and	r25, r24
     718:	97 bb       	out	0x17, r25	; 23
     71a:	98 b3       	in	r25, 0x18	; 24
     71c:	89 23       	and	r24, r25
     71e:	88 bb       	out	0x18, r24	; 24
     720:	c3 c0       	rjmp	.+390    	; 0x8a8 <__stack+0x49>
     722:	44 b3       	in	r20, 0x14	; 20
     724:	21 e0       	ldi	r18, 0x01	; 1
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	b9 01       	movw	r22, r18
     72a:	02 c0       	rjmp	.+4      	; 0x730 <DIO_INITPIN+0x86>
     72c:	66 0f       	add	r22, r22
     72e:	77 1f       	adc	r23, r23
     730:	8a 95       	dec	r24
     732:	e2 f7       	brpl	.-8      	; 0x72c <DIO_INITPIN+0x82>
     734:	cb 01       	movw	r24, r22
     736:	80 95       	com	r24
     738:	94 2f       	mov	r25, r20
     73a:	98 23       	and	r25, r24
     73c:	94 bb       	out	0x14, r25	; 20
     73e:	95 b3       	in	r25, 0x15	; 21
     740:	89 23       	and	r24, r25
     742:	85 bb       	out	0x15, r24	; 21
     744:	b1 c0       	rjmp	.+354    	; 0x8a8 <__stack+0x49>
     746:	41 b3       	in	r20, 0x11	; 17
     748:	21 e0       	ldi	r18, 0x01	; 1
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	b9 01       	movw	r22, r18
     74e:	02 c0       	rjmp	.+4      	; 0x754 <DIO_INITPIN+0xaa>
     750:	66 0f       	add	r22, r22
     752:	77 1f       	adc	r23, r23
     754:	8a 95       	dec	r24
     756:	e2 f7       	brpl	.-8      	; 0x750 <DIO_INITPIN+0xa6>
     758:	cb 01       	movw	r24, r22
     75a:	80 95       	com	r24
     75c:	94 2f       	mov	r25, r20
     75e:	98 23       	and	r25, r24
     760:	91 bb       	out	0x11, r25	; 17
     762:	92 b3       	in	r25, 0x12	; 18
     764:	89 23       	and	r24, r25
     766:	82 bb       	out	0x12, r24	; 18
     768:	9f c0       	rjmp	.+318    	; 0x8a8 <__stack+0x49>
     76a:	91 30       	cpi	r25, 0x01	; 1
     76c:	c1 f0       	breq	.+48     	; 0x79e <DIO_INITPIN+0xf4>
     76e:	28 f0       	brcs	.+10     	; 0x77a <DIO_INITPIN+0xd0>
     770:	92 30       	cpi	r25, 0x02	; 2
     772:	39 f1       	breq	.+78     	; 0x7c2 <DIO_INITPIN+0x118>
     774:	93 30       	cpi	r25, 0x03	; 3
     776:	b9 f1       	breq	.+110    	; 0x7e6 <DIO_INITPIN+0x13c>
     778:	97 c0       	rjmp	.+302    	; 0x8a8 <__stack+0x49>
     77a:	4a b3       	in	r20, 0x1a	; 26
     77c:	21 e0       	ldi	r18, 0x01	; 1
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	b9 01       	movw	r22, r18
     782:	02 c0       	rjmp	.+4      	; 0x788 <DIO_INITPIN+0xde>
     784:	66 0f       	add	r22, r22
     786:	77 1f       	adc	r23, r23
     788:	8a 95       	dec	r24
     78a:	e2 f7       	brpl	.-8      	; 0x784 <DIO_INITPIN+0xda>
     78c:	cb 01       	movw	r24, r22
     78e:	96 2f       	mov	r25, r22
     790:	90 95       	com	r25
     792:	94 23       	and	r25, r20
     794:	9a bb       	out	0x1a, r25	; 26
     796:	9b b3       	in	r25, 0x1b	; 27
     798:	89 2b       	or	r24, r25
     79a:	8b bb       	out	0x1b, r24	; 27
     79c:	85 c0       	rjmp	.+266    	; 0x8a8 <__stack+0x49>
     79e:	47 b3       	in	r20, 0x17	; 23
     7a0:	21 e0       	ldi	r18, 0x01	; 1
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	b9 01       	movw	r22, r18
     7a6:	02 c0       	rjmp	.+4      	; 0x7ac <DIO_INITPIN+0x102>
     7a8:	66 0f       	add	r22, r22
     7aa:	77 1f       	adc	r23, r23
     7ac:	8a 95       	dec	r24
     7ae:	e2 f7       	brpl	.-8      	; 0x7a8 <DIO_INITPIN+0xfe>
     7b0:	cb 01       	movw	r24, r22
     7b2:	96 2f       	mov	r25, r22
     7b4:	90 95       	com	r25
     7b6:	94 23       	and	r25, r20
     7b8:	97 bb       	out	0x17, r25	; 23
     7ba:	98 b3       	in	r25, 0x18	; 24
     7bc:	89 2b       	or	r24, r25
     7be:	88 bb       	out	0x18, r24	; 24
     7c0:	73 c0       	rjmp	.+230    	; 0x8a8 <__stack+0x49>
     7c2:	44 b3       	in	r20, 0x14	; 20
     7c4:	21 e0       	ldi	r18, 0x01	; 1
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	b9 01       	movw	r22, r18
     7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <DIO_INITPIN+0x126>
     7cc:	66 0f       	add	r22, r22
     7ce:	77 1f       	adc	r23, r23
     7d0:	8a 95       	dec	r24
     7d2:	e2 f7       	brpl	.-8      	; 0x7cc <DIO_INITPIN+0x122>
     7d4:	cb 01       	movw	r24, r22
     7d6:	96 2f       	mov	r25, r22
     7d8:	90 95       	com	r25
     7da:	94 23       	and	r25, r20
     7dc:	94 bb       	out	0x14, r25	; 20
     7de:	95 b3       	in	r25, 0x15	; 21
     7e0:	89 2b       	or	r24, r25
     7e2:	85 bb       	out	0x15, r24	; 21
     7e4:	61 c0       	rjmp	.+194    	; 0x8a8 <__stack+0x49>
     7e6:	41 b3       	in	r20, 0x11	; 17
     7e8:	21 e0       	ldi	r18, 0x01	; 1
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	b9 01       	movw	r22, r18
     7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <DIO_INITPIN+0x14a>
     7f0:	66 0f       	add	r22, r22
     7f2:	77 1f       	adc	r23, r23
     7f4:	8a 95       	dec	r24
     7f6:	e2 f7       	brpl	.-8      	; 0x7f0 <DIO_INITPIN+0x146>
     7f8:	cb 01       	movw	r24, r22
     7fa:	96 2f       	mov	r25, r22
     7fc:	90 95       	com	r25
     7fe:	94 23       	and	r25, r20
     800:	91 bb       	out	0x11, r25	; 17
     802:	92 b3       	in	r25, 0x12	; 18
     804:	89 2b       	or	r24, r25
     806:	82 bb       	out	0x12, r24	; 18
     808:	4f c0       	rjmp	.+158    	; 0x8a8 <__stack+0x49>
     80a:	91 30       	cpi	r25, 0x01	; 1
     80c:	c1 f0       	breq	.+48     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
     80e:	28 f0       	brcs	.+10     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     810:	92 30       	cpi	r25, 0x02	; 2
     812:	39 f1       	breq	.+78     	; 0x862 <__stack+0x3>
     814:	93 30       	cpi	r25, 0x03	; 3
     816:	b9 f1       	breq	.+110    	; 0x886 <__stack+0x27>
     818:	47 c0       	rjmp	.+142    	; 0x8a8 <__stack+0x49>
     81a:	4b b3       	in	r20, 0x1b	; 27
     81c:	21 e0       	ldi	r18, 0x01	; 1
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	b9 01       	movw	r22, r18
     822:	02 c0       	rjmp	.+4      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     824:	66 0f       	add	r22, r22
     826:	77 1f       	adc	r23, r23
     828:	8a 95       	dec	r24
     82a:	e2 f7       	brpl	.-8      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     82c:	cb 01       	movw	r24, r22
     82e:	96 2f       	mov	r25, r22
     830:	90 95       	com	r25
     832:	94 23       	and	r25, r20
     834:	9b bb       	out	0x1b, r25	; 27
     836:	9a b3       	in	r25, 0x1a	; 26
     838:	89 2b       	or	r24, r25
     83a:	8a bb       	out	0x1a, r24	; 26
     83c:	35 c0       	rjmp	.+106    	; 0x8a8 <__stack+0x49>
     83e:	48 b3       	in	r20, 0x18	; 24
     840:	21 e0       	ldi	r18, 0x01	; 1
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	b9 01       	movw	r22, r18
     846:	02 c0       	rjmp	.+4      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     848:	66 0f       	add	r22, r22
     84a:	77 1f       	adc	r23, r23
     84c:	8a 95       	dec	r24
     84e:	e2 f7       	brpl	.-8      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     850:	cb 01       	movw	r24, r22
     852:	96 2f       	mov	r25, r22
     854:	90 95       	com	r25
     856:	94 23       	and	r25, r20
     858:	98 bb       	out	0x18, r25	; 24
     85a:	97 b3       	in	r25, 0x17	; 23
     85c:	89 2b       	or	r24, r25
     85e:	87 bb       	out	0x17, r24	; 23
     860:	23 c0       	rjmp	.+70     	; 0x8a8 <__stack+0x49>
     862:	45 b3       	in	r20, 0x15	; 21
     864:	21 e0       	ldi	r18, 0x01	; 1
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	b9 01       	movw	r22, r18
     86a:	02 c0       	rjmp	.+4      	; 0x870 <__stack+0x11>
     86c:	66 0f       	add	r22, r22
     86e:	77 1f       	adc	r23, r23
     870:	8a 95       	dec	r24
     872:	e2 f7       	brpl	.-8      	; 0x86c <__stack+0xd>
     874:	cb 01       	movw	r24, r22
     876:	96 2f       	mov	r25, r22
     878:	90 95       	com	r25
     87a:	94 23       	and	r25, r20
     87c:	95 bb       	out	0x15, r25	; 21
     87e:	94 b3       	in	r25, 0x14	; 20
     880:	89 2b       	or	r24, r25
     882:	84 bb       	out	0x14, r24	; 20
     884:	11 c0       	rjmp	.+34     	; 0x8a8 <__stack+0x49>
     886:	42 b3       	in	r20, 0x12	; 18
     888:	21 e0       	ldi	r18, 0x01	; 1
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	b9 01       	movw	r22, r18
     88e:	02 c0       	rjmp	.+4      	; 0x894 <__stack+0x35>
     890:	66 0f       	add	r22, r22
     892:	77 1f       	adc	r23, r23
     894:	8a 95       	dec	r24
     896:	e2 f7       	brpl	.-8      	; 0x890 <__stack+0x31>
     898:	cb 01       	movw	r24, r22
     89a:	96 2f       	mov	r25, r22
     89c:	90 95       	com	r25
     89e:	94 23       	and	r25, r20
     8a0:	92 bb       	out	0x12, r25	; 18
     8a2:	91 b3       	in	r25, 0x11	; 17
     8a4:	89 2b       	or	r24, r25
     8a6:	81 bb       	out	0x11, r24	; 17
     8a8:	08 95       	ret
     8aa:	82 e0       	ldi	r24, 0x02	; 2
     8ac:	08 95       	ret

000008ae <DIO_WRITEPIN>:
     8ae:	98 2f       	mov	r25, r24
     8b0:	96 95       	lsr	r25
     8b2:	96 95       	lsr	r25
     8b4:	96 95       	lsr	r25
     8b6:	87 70       	andi	r24, 0x07	; 7
     8b8:	95 30       	cpi	r25, 0x05	; 5
     8ba:	08 f0       	brcs	.+2      	; 0x8be <DIO_WRITEPIN+0x10>
     8bc:	8d c0       	rjmp	.+282    	; 0x9d8 <DIO_WRITEPIN+0x12a>
     8be:	63 30       	cpi	r22, 0x03	; 3
     8c0:	08 f0       	brcs	.+2      	; 0x8c4 <DIO_WRITEPIN+0x16>
     8c2:	8c c0       	rjmp	.+280    	; 0x9dc <DIO_WRITEPIN+0x12e>
     8c4:	61 30       	cpi	r22, 0x01	; 1
     8c6:	09 f0       	breq	.+2      	; 0x8ca <DIO_WRITEPIN+0x1c>
     8c8:	40 c0       	rjmp	.+128    	; 0x94a <DIO_WRITEPIN+0x9c>
     8ca:	91 30       	cpi	r25, 0x01	; 1
     8cc:	a1 f0       	breq	.+40     	; 0x8f6 <DIO_WRITEPIN+0x48>
     8ce:	28 f0       	brcs	.+10     	; 0x8da <DIO_WRITEPIN+0x2c>
     8d0:	92 30       	cpi	r25, 0x02	; 2
     8d2:	f9 f0       	breq	.+62     	; 0x912 <DIO_WRITEPIN+0x64>
     8d4:	93 30       	cpi	r25, 0x03	; 3
     8d6:	59 f1       	breq	.+86     	; 0x92e <DIO_WRITEPIN+0x80>
     8d8:	83 c0       	rjmp	.+262    	; 0x9e0 <DIO_WRITEPIN+0x132>
     8da:	4b b3       	in	r20, 0x1b	; 27
     8dc:	21 e0       	ldi	r18, 0x01	; 1
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	b9 01       	movw	r22, r18
     8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <DIO_WRITEPIN+0x3a>
     8e4:	66 0f       	add	r22, r22
     8e6:	77 1f       	adc	r23, r23
     8e8:	8a 95       	dec	r24
     8ea:	e2 f7       	brpl	.-8      	; 0x8e4 <DIO_WRITEPIN+0x36>
     8ec:	cb 01       	movw	r24, r22
     8ee:	84 2b       	or	r24, r20
     8f0:	8b bb       	out	0x1b, r24	; 27
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	08 95       	ret
     8f6:	48 b3       	in	r20, 0x18	; 24
     8f8:	21 e0       	ldi	r18, 0x01	; 1
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	b9 01       	movw	r22, r18
     8fe:	02 c0       	rjmp	.+4      	; 0x904 <DIO_WRITEPIN+0x56>
     900:	66 0f       	add	r22, r22
     902:	77 1f       	adc	r23, r23
     904:	8a 95       	dec	r24
     906:	e2 f7       	brpl	.-8      	; 0x900 <DIO_WRITEPIN+0x52>
     908:	cb 01       	movw	r24, r22
     90a:	84 2b       	or	r24, r20
     90c:	88 bb       	out	0x18, r24	; 24
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	08 95       	ret
     912:	45 b3       	in	r20, 0x15	; 21
     914:	21 e0       	ldi	r18, 0x01	; 1
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	b9 01       	movw	r22, r18
     91a:	02 c0       	rjmp	.+4      	; 0x920 <DIO_WRITEPIN+0x72>
     91c:	66 0f       	add	r22, r22
     91e:	77 1f       	adc	r23, r23
     920:	8a 95       	dec	r24
     922:	e2 f7       	brpl	.-8      	; 0x91c <DIO_WRITEPIN+0x6e>
     924:	cb 01       	movw	r24, r22
     926:	84 2b       	or	r24, r20
     928:	85 bb       	out	0x15, r24	; 21
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	08 95       	ret
     92e:	42 b3       	in	r20, 0x12	; 18
     930:	21 e0       	ldi	r18, 0x01	; 1
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	b9 01       	movw	r22, r18
     936:	02 c0       	rjmp	.+4      	; 0x93c <DIO_WRITEPIN+0x8e>
     938:	66 0f       	add	r22, r22
     93a:	77 1f       	adc	r23, r23
     93c:	8a 95       	dec	r24
     93e:	e2 f7       	brpl	.-8      	; 0x938 <DIO_WRITEPIN+0x8a>
     940:	cb 01       	movw	r24, r22
     942:	84 2b       	or	r24, r20
     944:	82 bb       	out	0x12, r24	; 18
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	08 95       	ret
     94a:	61 11       	cpse	r22, r1
     94c:	44 c0       	rjmp	.+136    	; 0x9d6 <DIO_WRITEPIN+0x128>
     94e:	91 30       	cpi	r25, 0x01	; 1
     950:	a9 f0       	breq	.+42     	; 0x97c <DIO_WRITEPIN+0xce>
     952:	28 f0       	brcs	.+10     	; 0x95e <DIO_WRITEPIN+0xb0>
     954:	92 30       	cpi	r25, 0x02	; 2
     956:	09 f1       	breq	.+66     	; 0x99a <DIO_WRITEPIN+0xec>
     958:	93 30       	cpi	r25, 0x03	; 3
     95a:	71 f1       	breq	.+92     	; 0x9b8 <DIO_WRITEPIN+0x10a>
     95c:	43 c0       	rjmp	.+134    	; 0x9e4 <DIO_WRITEPIN+0x136>
     95e:	4b b3       	in	r20, 0x1b	; 27
     960:	21 e0       	ldi	r18, 0x01	; 1
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	b9 01       	movw	r22, r18
     966:	02 c0       	rjmp	.+4      	; 0x96c <DIO_WRITEPIN+0xbe>
     968:	66 0f       	add	r22, r22
     96a:	77 1f       	adc	r23, r23
     96c:	8a 95       	dec	r24
     96e:	e2 f7       	brpl	.-8      	; 0x968 <DIO_WRITEPIN+0xba>
     970:	cb 01       	movw	r24, r22
     972:	80 95       	com	r24
     974:	84 23       	and	r24, r20
     976:	8b bb       	out	0x1b, r24	; 27
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	08 95       	ret
     97c:	48 b3       	in	r20, 0x18	; 24
     97e:	21 e0       	ldi	r18, 0x01	; 1
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	b9 01       	movw	r22, r18
     984:	02 c0       	rjmp	.+4      	; 0x98a <DIO_WRITEPIN+0xdc>
     986:	66 0f       	add	r22, r22
     988:	77 1f       	adc	r23, r23
     98a:	8a 95       	dec	r24
     98c:	e2 f7       	brpl	.-8      	; 0x986 <DIO_WRITEPIN+0xd8>
     98e:	cb 01       	movw	r24, r22
     990:	80 95       	com	r24
     992:	84 23       	and	r24, r20
     994:	88 bb       	out	0x18, r24	; 24
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	08 95       	ret
     99a:	45 b3       	in	r20, 0x15	; 21
     99c:	21 e0       	ldi	r18, 0x01	; 1
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	b9 01       	movw	r22, r18
     9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <DIO_WRITEPIN+0xfa>
     9a4:	66 0f       	add	r22, r22
     9a6:	77 1f       	adc	r23, r23
     9a8:	8a 95       	dec	r24
     9aa:	e2 f7       	brpl	.-8      	; 0x9a4 <DIO_WRITEPIN+0xf6>
     9ac:	cb 01       	movw	r24, r22
     9ae:	80 95       	com	r24
     9b0:	84 23       	and	r24, r20
     9b2:	85 bb       	out	0x15, r24	; 21
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	08 95       	ret
     9b8:	42 b3       	in	r20, 0x12	; 18
     9ba:	21 e0       	ldi	r18, 0x01	; 1
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	b9 01       	movw	r22, r18
     9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <DIO_WRITEPIN+0x118>
     9c2:	66 0f       	add	r22, r22
     9c4:	77 1f       	adc	r23, r23
     9c6:	8a 95       	dec	r24
     9c8:	e2 f7       	brpl	.-8      	; 0x9c2 <DIO_WRITEPIN+0x114>
     9ca:	cb 01       	movw	r24, r22
     9cc:	80 95       	com	r24
     9ce:	84 23       	and	r24, r20
     9d0:	82 bb       	out	0x12, r24	; 18
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	08 95       	ret
     9d6:	08 95       	ret
     9d8:	82 e0       	ldi	r24, 0x02	; 2
     9da:	08 95       	ret
     9dc:	83 e0       	ldi	r24, 0x03	; 3
     9de:	08 95       	ret
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	08 95       	ret
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	08 95       	ret

000009e8 <DIO_READPIN>:
     9e8:	98 2f       	mov	r25, r24
     9ea:	96 95       	lsr	r25
     9ec:	96 95       	lsr	r25
     9ee:	96 95       	lsr	r25
     9f0:	87 70       	andi	r24, 0x07	; 7
     9f2:	95 30       	cpi	r25, 0x05	; 5
     9f4:	08 f0       	brcs	.+2      	; 0x9f8 <DIO_READPIN+0x10>
     9f6:	40 c0       	rjmp	.+128    	; 0xa78 <DIO_READPIN+0x90>
     9f8:	91 30       	cpi	r25, 0x01	; 1
     9fa:	a1 f0       	breq	.+40     	; 0xa24 <DIO_READPIN+0x3c>
     9fc:	28 f0       	brcs	.+10     	; 0xa08 <DIO_READPIN+0x20>
     9fe:	92 30       	cpi	r25, 0x02	; 2
     a00:	f9 f0       	breq	.+62     	; 0xa40 <DIO_READPIN+0x58>
     a02:	93 30       	cpi	r25, 0x03	; 3
     a04:	59 f1       	breq	.+86     	; 0xa5c <DIO_READPIN+0x74>
     a06:	3a c0       	rjmp	.+116    	; 0xa7c <DIO_READPIN+0x94>
     a08:	29 b3       	in	r18, 0x19	; 25
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	a9 01       	movw	r20, r18
     a0e:	02 c0       	rjmp	.+4      	; 0xa14 <DIO_READPIN+0x2c>
     a10:	55 95       	asr	r21
     a12:	47 95       	ror	r20
     a14:	8a 95       	dec	r24
     a16:	e2 f7       	brpl	.-8      	; 0xa10 <DIO_READPIN+0x28>
     a18:	ca 01       	movw	r24, r20
     a1a:	81 70       	andi	r24, 0x01	; 1
     a1c:	fb 01       	movw	r30, r22
     a1e:	80 83       	st	Z, r24
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	08 95       	ret
     a24:	26 b3       	in	r18, 0x16	; 22
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	a9 01       	movw	r20, r18
     a2a:	02 c0       	rjmp	.+4      	; 0xa30 <DIO_READPIN+0x48>
     a2c:	55 95       	asr	r21
     a2e:	47 95       	ror	r20
     a30:	8a 95       	dec	r24
     a32:	e2 f7       	brpl	.-8      	; 0xa2c <DIO_READPIN+0x44>
     a34:	ca 01       	movw	r24, r20
     a36:	81 70       	andi	r24, 0x01	; 1
     a38:	fb 01       	movw	r30, r22
     a3a:	80 83       	st	Z, r24
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	08 95       	ret
     a40:	23 b3       	in	r18, 0x13	; 19
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	a9 01       	movw	r20, r18
     a46:	02 c0       	rjmp	.+4      	; 0xa4c <DIO_READPIN+0x64>
     a48:	55 95       	asr	r21
     a4a:	47 95       	ror	r20
     a4c:	8a 95       	dec	r24
     a4e:	e2 f7       	brpl	.-8      	; 0xa48 <DIO_READPIN+0x60>
     a50:	ca 01       	movw	r24, r20
     a52:	81 70       	andi	r24, 0x01	; 1
     a54:	fb 01       	movw	r30, r22
     a56:	80 83       	st	Z, r24
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	08 95       	ret
     a5c:	20 b3       	in	r18, 0x10	; 16
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	a9 01       	movw	r20, r18
     a62:	02 c0       	rjmp	.+4      	; 0xa68 <DIO_READPIN+0x80>
     a64:	55 95       	asr	r21
     a66:	47 95       	ror	r20
     a68:	8a 95       	dec	r24
     a6a:	e2 f7       	brpl	.-8      	; 0xa64 <DIO_READPIN+0x7c>
     a6c:	ca 01       	movw	r24, r20
     a6e:	81 70       	andi	r24, 0x01	; 1
     a70:	fb 01       	movw	r30, r22
     a72:	80 83       	st	Z, r24
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	08 95       	ret
     a78:	82 e0       	ldi	r24, 0x02	; 2
     a7a:	08 95       	ret
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 95       	ret

00000a80 <__vector_1>:
     a80:	1f 92       	push	r1
     a82:	0f 92       	push	r0
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	0f 92       	push	r0
     a88:	11 24       	eor	r1, r1
     a8a:	2f 93       	push	r18
     a8c:	3f 93       	push	r19
     a8e:	4f 93       	push	r20
     a90:	5f 93       	push	r21
     a92:	6f 93       	push	r22
     a94:	7f 93       	push	r23
     a96:	8f 93       	push	r24
     a98:	9f 93       	push	r25
     a9a:	af 93       	push	r26
     a9c:	bf 93       	push	r27
     a9e:	ef 93       	push	r30
     aa0:	ff 93       	push	r31
     aa2:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <__data_end>
     aa6:	e0 91 a1 00 	lds	r30, 0x00A1	; 0x8000a1 <ptrf_INT_0>
     aaa:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <ptrf_INT_0+0x1>
     aae:	30 97       	sbiw	r30, 0x00	; 0
     ab0:	89 f0       	breq	.+34     	; 0xad4 <__vector_1+0x54>
     ab2:	09 95       	icall
     ab4:	60 e0       	ldi	r22, 0x00	; 0
     ab6:	80 e1       	ldi	r24, 0x10	; 16
     ab8:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_WRITEPIN>
     abc:	60 e0       	ldi	r22, 0x00	; 0
     abe:	81 e1       	ldi	r24, 0x11	; 17
     ac0:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_WRITEPIN>
     ac4:	60 e0       	ldi	r22, 0x00	; 0
     ac6:	82 e1       	ldi	r24, 0x12	; 18
     ac8:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_WRITEPIN>
     acc:	60 e0       	ldi	r22, 0x00	; 0
     ace:	83 e1       	ldi	r24, 0x13	; 19
     ad0:	0e 94 57 04 	call	0x8ae	; 0x8ae <DIO_WRITEPIN>
     ad4:	ff 91       	pop	r31
     ad6:	ef 91       	pop	r30
     ad8:	bf 91       	pop	r27
     ada:	af 91       	pop	r26
     adc:	9f 91       	pop	r25
     ade:	8f 91       	pop	r24
     ae0:	7f 91       	pop	r23
     ae2:	6f 91       	pop	r22
     ae4:	5f 91       	pop	r21
     ae6:	4f 91       	pop	r20
     ae8:	3f 91       	pop	r19
     aea:	2f 91       	pop	r18
     aec:	0f 90       	pop	r0
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	0f 90       	pop	r0
     af2:	1f 90       	pop	r1
     af4:	18 95       	reti

00000af6 <__vector_2>:
     af6:	1f 92       	push	r1
     af8:	0f 92       	push	r0
     afa:	0f b6       	in	r0, 0x3f	; 63
     afc:	0f 92       	push	r0
     afe:	11 24       	eor	r1, r1
     b00:	8f 93       	push	r24
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__data_end>
     b08:	8f 91       	pop	r24
     b0a:	0f 90       	pop	r0
     b0c:	0f be       	out	0x3f, r0	; 63
     b0e:	0f 90       	pop	r0
     b10:	1f 90       	pop	r1
     b12:	18 95       	reti

00000b14 <__vector_3>:
     b14:	1f 92       	push	r1
     b16:	0f 92       	push	r0
     b18:	0f b6       	in	r0, 0x3f	; 63
     b1a:	0f 92       	push	r0
     b1c:	11 24       	eor	r1, r1
     b1e:	2f 93       	push	r18
     b20:	3f 93       	push	r19
     b22:	4f 93       	push	r20
     b24:	5f 93       	push	r21
     b26:	6f 93       	push	r22
     b28:	7f 93       	push	r23
     b2a:	8f 93       	push	r24
     b2c:	9f 93       	push	r25
     b2e:	af 93       	push	r26
     b30:	bf 93       	push	r27
     b32:	ef 93       	push	r30
     b34:	ff 93       	push	r31
     b36:	e0 91 9f 00 	lds	r30, 0x009F	; 0x80009f <ptrf_INT_2>
     b3a:	f0 91 a0 00 	lds	r31, 0x00A0	; 0x8000a0 <ptrf_INT_2+0x1>
     b3e:	30 97       	sbiw	r30, 0x00	; 0
     b40:	09 f0       	breq	.+2      	; 0xb44 <__vector_3+0x30>
     b42:	09 95       	icall
     b44:	ff 91       	pop	r31
     b46:	ef 91       	pop	r30
     b48:	bf 91       	pop	r27
     b4a:	af 91       	pop	r26
     b4c:	9f 91       	pop	r25
     b4e:	8f 91       	pop	r24
     b50:	7f 91       	pop	r23
     b52:	6f 91       	pop	r22
     b54:	5f 91       	pop	r21
     b56:	4f 91       	pop	r20
     b58:	3f 91       	pop	r19
     b5a:	2f 91       	pop	r18
     b5c:	0f 90       	pop	r0
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	0f 90       	pop	r0
     b62:	1f 90       	pop	r1
     b64:	18 95       	reti

00000b66 <TIMER_0_init>:
	TIMER_2_init(NORMAL_MODE);
	TIMER_2_setIntialValue(0);
	TIMER_2_start(PRECALER_1);
	TIMER_2_OvfNum(ovfNum2);
	
}
     b66:	81 30       	cpi	r24, 0x01	; 1
     b68:	f1 f0       	breq	.+60     	; 0xba6 <TIMER_0_init+0x40>
     b6a:	28 f0       	brcs	.+10     	; 0xb76 <TIMER_0_init+0x10>
     b6c:	82 30       	cpi	r24, 0x02	; 2
     b6e:	99 f0       	breq	.+38     	; 0xb96 <TIMER_0_init+0x30>
     b70:	83 30       	cpi	r24, 0x03	; 3
     b72:	49 f0       	breq	.+18     	; 0xb86 <TIMER_0_init+0x20>
     b74:	20 c0       	rjmp	.+64     	; 0xbb6 <TIMER_0_init+0x50>
     b76:	83 b7       	in	r24, 0x33	; 51
     b78:	8f 7b       	andi	r24, 0xBF	; 191
     b7a:	83 bf       	out	0x33, r24	; 51
     b7c:	83 b7       	in	r24, 0x33	; 51
     b7e:	87 7f       	andi	r24, 0xF7	; 247
     b80:	83 bf       	out	0x33, r24	; 51
     b82:	84 e0       	ldi	r24, 0x04	; 4
     b84:	08 95       	ret
     b86:	83 b7       	in	r24, 0x33	; 51
     b88:	80 64       	ori	r24, 0x40	; 64
     b8a:	83 bf       	out	0x33, r24	; 51
     b8c:	83 b7       	in	r24, 0x33	; 51
     b8e:	87 7f       	andi	r24, 0xF7	; 247
     b90:	83 bf       	out	0x33, r24	; 51
     b92:	84 e0       	ldi	r24, 0x04	; 4
     b94:	08 95       	ret
     b96:	83 b7       	in	r24, 0x33	; 51
     b98:	8f 7b       	andi	r24, 0xBF	; 191
     b9a:	83 bf       	out	0x33, r24	; 51
     b9c:	83 b7       	in	r24, 0x33	; 51
     b9e:	88 60       	ori	r24, 0x08	; 8
     ba0:	83 bf       	out	0x33, r24	; 51
     ba2:	84 e0       	ldi	r24, 0x04	; 4
     ba4:	08 95       	ret
     ba6:	83 b7       	in	r24, 0x33	; 51
     ba8:	80 64       	ori	r24, 0x40	; 64
     baa:	83 bf       	out	0x33, r24	; 51
     bac:	83 b7       	in	r24, 0x33	; 51
     bae:	88 60       	ori	r24, 0x08	; 8
     bb0:	83 bf       	out	0x33, r24	; 51
     bb2:	84 e0       	ldi	r24, 0x04	; 4
     bb4:	08 95       	ret
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	08 95       	ret

00000bba <TIMER_0_start>:
     bba:	82 30       	cpi	r24, 0x02	; 2
     bbc:	09 f1       	breq	.+66     	; 0xc00 <TIMER_0_start+0x46>
     bbe:	28 f4       	brcc	.+10     	; 0xbca <TIMER_0_start+0x10>
     bc0:	88 23       	and	r24, r24
     bc2:	41 f0       	breq	.+16     	; 0xbd4 <TIMER_0_start+0x1a>
     bc4:	81 30       	cpi	r24, 0x01	; 1
     bc6:	89 f0       	breq	.+34     	; 0xbea <TIMER_0_start+0x30>
     bc8:	3c c0       	rjmp	.+120    	; 0xc42 <TIMER_0_start+0x88>
     bca:	85 30       	cpi	r24, 0x05	; 5
     bcc:	21 f1       	breq	.+72     	; 0xc16 <TIMER_0_start+0x5c>
     bce:	86 30       	cpi	r24, 0x06	; 6
     bd0:	69 f1       	breq	.+90     	; 0xc2c <TIMER_0_start+0x72>
     bd2:	37 c0       	rjmp	.+110    	; 0xc42 <TIMER_0_start+0x88>
     bd4:	83 b7       	in	r24, 0x33	; 51
     bd6:	81 60       	ori	r24, 0x01	; 1
     bd8:	83 bf       	out	0x33, r24	; 51
     bda:	83 b7       	in	r24, 0x33	; 51
     bdc:	8d 7f       	andi	r24, 0xFD	; 253
     bde:	83 bf       	out	0x33, r24	; 51
     be0:	83 b7       	in	r24, 0x33	; 51
     be2:	8b 7f       	andi	r24, 0xFB	; 251
     be4:	83 bf       	out	0x33, r24	; 51
     be6:	84 e0       	ldi	r24, 0x04	; 4
     be8:	08 95       	ret
     bea:	83 b7       	in	r24, 0x33	; 51
     bec:	82 60       	ori	r24, 0x02	; 2
     bee:	83 bf       	out	0x33, r24	; 51
     bf0:	83 b7       	in	r24, 0x33	; 51
     bf2:	8e 7f       	andi	r24, 0xFE	; 254
     bf4:	83 bf       	out	0x33, r24	; 51
     bf6:	83 b7       	in	r24, 0x33	; 51
     bf8:	8b 7f       	andi	r24, 0xFB	; 251
     bfa:	83 bf       	out	0x33, r24	; 51
     bfc:	84 e0       	ldi	r24, 0x04	; 4
     bfe:	08 95       	ret
     c00:	83 b7       	in	r24, 0x33	; 51
     c02:	81 60       	ori	r24, 0x01	; 1
     c04:	83 bf       	out	0x33, r24	; 51
     c06:	83 b7       	in	r24, 0x33	; 51
     c08:	82 60       	ori	r24, 0x02	; 2
     c0a:	83 bf       	out	0x33, r24	; 51
     c0c:	83 b7       	in	r24, 0x33	; 51
     c0e:	8b 7f       	andi	r24, 0xFB	; 251
     c10:	83 bf       	out	0x33, r24	; 51
     c12:	84 e0       	ldi	r24, 0x04	; 4
     c14:	08 95       	ret
     c16:	83 b7       	in	r24, 0x33	; 51
     c18:	84 60       	ori	r24, 0x04	; 4
     c1a:	83 bf       	out	0x33, r24	; 51
     c1c:	83 b7       	in	r24, 0x33	; 51
     c1e:	8d 7f       	andi	r24, 0xFD	; 253
     c20:	83 bf       	out	0x33, r24	; 51
     c22:	83 b7       	in	r24, 0x33	; 51
     c24:	8e 7f       	andi	r24, 0xFE	; 254
     c26:	83 bf       	out	0x33, r24	; 51
     c28:	84 e0       	ldi	r24, 0x04	; 4
     c2a:	08 95       	ret
     c2c:	83 b7       	in	r24, 0x33	; 51
     c2e:	81 60       	ori	r24, 0x01	; 1
     c30:	83 bf       	out	0x33, r24	; 51
     c32:	83 b7       	in	r24, 0x33	; 51
     c34:	8d 7f       	andi	r24, 0xFD	; 253
     c36:	83 bf       	out	0x33, r24	; 51
     c38:	83 b7       	in	r24, 0x33	; 51
     c3a:	84 60       	ori	r24, 0x04	; 4
     c3c:	83 bf       	out	0x33, r24	; 51
     c3e:	84 e0       	ldi	r24, 0x04	; 4
     c40:	08 95       	ret
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	08 95       	ret

00000c46 <TIMER_0_setIntialValue>:
     c46:	cf 92       	push	r12
     c48:	df 92       	push	r13
     c4a:	ef 92       	push	r14
     c4c:	ff 92       	push	r15
     c4e:	6b 01       	movw	r12, r22
     c50:	7c 01       	movw	r14, r24
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	40 e8       	ldi	r20, 0x80	; 128
     c58:	53 e4       	ldi	r21, 0x43	; 67
     c5a:	0e 94 44 08 	call	0x1088	; 0x1088 <__cmpsf2>
     c5e:	88 23       	and	r24, r24
     c60:	94 f4       	brge	.+36     	; 0xc86 <TIMER_0_setIntialValue+0x40>
     c62:	20 e0       	ldi	r18, 0x00	; 0
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	a9 01       	movw	r20, r18
     c68:	c7 01       	movw	r24, r14
     c6a:	b6 01       	movw	r22, r12
     c6c:	0e 94 a0 09 	call	0x1340	; 0x1340 <__gesf2>
     c70:	88 23       	and	r24, r24
     c72:	5c f0       	brlt	.+22     	; 0xc8a <TIMER_0_setIntialValue+0x44>
     c74:	c7 01       	movw	r24, r14
     c76:	b6 01       	movw	r22, r12
     c78:	0e 94 2d 08 	call	0x105a	; 0x105a <ceil>
     c7c:	0e 94 bb 08 	call	0x1176	; 0x1176 <__fixunssfsi>
     c80:	62 bf       	out	0x32, r22	; 50
     c82:	84 e0       	ldi	r24, 0x04	; 4
     c84:	03 c0       	rjmp	.+6      	; 0xc8c <TIMER_0_setIntialValue+0x46>
     c86:	83 e0       	ldi	r24, 0x03	; 3
     c88:	01 c0       	rjmp	.+2      	; 0xc8c <TIMER_0_setIntialValue+0x46>
     c8a:	83 e0       	ldi	r24, 0x03	; 3
     c8c:	ff 90       	pop	r15
     c8e:	ef 90       	pop	r14
     c90:	df 90       	pop	r13
     c92:	cf 90       	pop	r12
     c94:	08 95       	ret

00000c96 <TIMER_0_OvfNum>:
     c96:	8f 92       	push	r8
     c98:	9f 92       	push	r9
     c9a:	af 92       	push	r10
     c9c:	bf 92       	push	r11
     c9e:	cf 92       	push	r12
     ca0:	df 92       	push	r13
     ca2:	ef 92       	push	r14
     ca4:	ff 92       	push	r15
     ca6:	4b 01       	movw	r8, r22
     ca8:	5c 01       	movw	r10, r24
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	a9 01       	movw	r20, r18
     cb0:	0e 94 a0 09 	call	0x1340	; 0x1340 <__gesf2>
     cb4:	18 16       	cp	r1, r24
     cb6:	94 f0       	brlt	.+36     	; 0xcdc <TIMER_0_OvfNum+0x46>
     cb8:	1e c0       	rjmp	.+60     	; 0xcf6 <TIMER_0_OvfNum+0x60>
     cba:	08 b6       	in	r0, 0x38	; 56
     cbc:	00 fe       	sbrs	r0, 0
     cbe:	fd cf       	rjmp	.-6      	; 0xcba <TIMER_0_OvfNum+0x24>
     cc0:	88 b7       	in	r24, 0x38	; 56
     cc2:	81 60       	ori	r24, 0x01	; 1
     cc4:	88 bf       	out	0x38, r24	; 56
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	40 e8       	ldi	r20, 0x80	; 128
     ccc:	5f e3       	ldi	r21, 0x3F	; 63
     cce:	c7 01       	movw	r24, r14
     cd0:	b6 01       	movw	r22, r12
     cd2:	0e 94 c1 07 	call	0xf82	; 0xf82 <__addsf3>
     cd6:	6b 01       	movw	r12, r22
     cd8:	7c 01       	movw	r14, r24
     cda:	03 c0       	rjmp	.+6      	; 0xce2 <TIMER_0_OvfNum+0x4c>
     cdc:	c1 2c       	mov	r12, r1
     cde:	d1 2c       	mov	r13, r1
     ce0:	76 01       	movw	r14, r12
     ce2:	a5 01       	movw	r20, r10
     ce4:	94 01       	movw	r18, r8
     ce6:	c7 01       	movw	r24, r14
     ce8:	b6 01       	movw	r22, r12
     cea:	0e 94 44 08 	call	0x1088	; 0x1088 <__cmpsf2>
     cee:	88 23       	and	r24, r24
     cf0:	24 f3       	brlt	.-56     	; 0xcba <TIMER_0_OvfNum+0x24>
     cf2:	84 e0       	ldi	r24, 0x04	; 4
     cf4:	2a c0       	rjmp	.+84     	; 0xd4a <TIMER_0_OvfNum+0xb4>
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	a9 01       	movw	r20, r18
     cfc:	c5 01       	movw	r24, r10
     cfe:	b4 01       	movw	r22, r8
     d00:	0e 94 44 08 	call	0x1088	; 0x1088 <__cmpsf2>
     d04:	18 16       	cp	r1, r24
     d06:	9c f4       	brge	.+38     	; 0xd2e <TIMER_0_OvfNum+0x98>
     d08:	82 e0       	ldi	r24, 0x02	; 2
     d0a:	1f c0       	rjmp	.+62     	; 0xd4a <TIMER_0_OvfNum+0xb4>
     d0c:	08 b6       	in	r0, 0x38	; 56
     d0e:	00 fe       	sbrs	r0, 0
     d10:	fd cf       	rjmp	.-6      	; 0xd0c <TIMER_0_OvfNum+0x76>
     d12:	88 b7       	in	r24, 0x38	; 56
     d14:	81 60       	ori	r24, 0x01	; 1
     d16:	88 bf       	out	0x38, r24	; 56
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	40 e8       	ldi	r20, 0x80	; 128
     d1e:	5f e3       	ldi	r21, 0x3F	; 63
     d20:	c7 01       	movw	r24, r14
     d22:	b6 01       	movw	r22, r12
     d24:	0e 94 c1 07 	call	0xf82	; 0xf82 <__addsf3>
     d28:	6b 01       	movw	r12, r22
     d2a:	7c 01       	movw	r14, r24
     d2c:	03 c0       	rjmp	.+6      	; 0xd34 <TIMER_0_OvfNum+0x9e>
     d2e:	c1 2c       	mov	r12, r1
     d30:	d1 2c       	mov	r13, r1
     d32:	76 01       	movw	r14, r12
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	40 e8       	ldi	r20, 0x80	; 128
     d3a:	5f e3       	ldi	r21, 0x3F	; 63
     d3c:	c7 01       	movw	r24, r14
     d3e:	b6 01       	movw	r22, r12
     d40:	0e 94 44 08 	call	0x1088	; 0x1088 <__cmpsf2>
     d44:	88 23       	and	r24, r24
     d46:	14 f3       	brlt	.-60     	; 0xd0c <TIMER_0_OvfNum+0x76>
     d48:	84 e0       	ldi	r24, 0x04	; 4
     d4a:	ff 90       	pop	r15
     d4c:	ef 90       	pop	r14
     d4e:	df 90       	pop	r13
     d50:	cf 90       	pop	r12
     d52:	bf 90       	pop	r11
     d54:	af 90       	pop	r10
     d56:	9f 90       	pop	r9
     d58:	8f 90       	pop	r8
     d5a:	08 95       	ret

00000d5c <TIMER_0_DELAY_MS>:
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	4a e7       	ldi	r20, 0x7A	; 122
     d62:	54 e4       	ldi	r21, 0x44	; 68
     d64:	0e 94 49 08 	call	0x1092	; 0x1092 <__divsf3>
     d68:	2d eb       	ldi	r18, 0xBD	; 189
     d6a:	37 e3       	ldi	r19, 0x37	; 55
     d6c:	46 e8       	ldi	r20, 0x86	; 134
     d6e:	59 e3       	ldi	r21, 0x39	; 57
     d70:	0e 94 49 08 	call	0x1092	; 0x1092 <__divsf3>
     d74:	0e 94 2d 08 	call	0x105a	; 0x105a <ceil>
     d78:	60 93 a7 00 	sts	0x00A7, r22	; 0x8000a7 <g_ovfNum>
     d7c:	70 93 a8 00 	sts	0x00A8, r23	; 0x8000a8 <g_ovfNum+0x1>
     d80:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <g_ovfNum+0x2>
     d84:	90 93 aa 00 	sts	0x00AA, r25	; 0x8000aa <g_ovfNum+0x3>
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	0e 94 b3 05 	call	0xb66	; 0xb66 <TIMER_0_init>
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	cb 01       	movw	r24, r22
     d94:	0e 94 23 06 	call	0xc46	; 0xc46 <TIMER_0_setIntialValue>
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	0e 94 dd 05 	call	0xbba	; 0xbba <TIMER_0_start>
     d9e:	60 91 a7 00 	lds	r22, 0x00A7	; 0x8000a7 <g_ovfNum>
     da2:	70 91 a8 00 	lds	r23, 0x00A8	; 0x8000a8 <g_ovfNum+0x1>
     da6:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <g_ovfNum+0x2>
     daa:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <g_ovfNum+0x3>
     dae:	0e 94 4b 06 	call	0xc96	; 0xc96 <TIMER_0_OvfNum>
     db2:	08 95       	ret

00000db4 <TIMER_2_init>:
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <TIMER_2_init+0x40>
     db8:	28 f0       	brcs	.+10     	; 0xdc4 <TIMER_2_init+0x10>
     dba:	82 30       	cpi	r24, 0x02	; 2
     dbc:	99 f0       	breq	.+38     	; 0xde4 <TIMER_2_init+0x30>
     dbe:	83 30       	cpi	r24, 0x03	; 3
     dc0:	49 f0       	breq	.+18     	; 0xdd4 <TIMER_2_init+0x20>
     dc2:	20 c0       	rjmp	.+64     	; 0xe04 <TIMER_2_init+0x50>
     dc4:	85 b5       	in	r24, 0x25	; 37
     dc6:	8f 7b       	andi	r24, 0xBF	; 191
     dc8:	85 bd       	out	0x25, r24	; 37
     dca:	85 b5       	in	r24, 0x25	; 37
     dcc:	87 7f       	andi	r24, 0xF7	; 247
     dce:	85 bd       	out	0x25, r24	; 37
     dd0:	84 e0       	ldi	r24, 0x04	; 4
     dd2:	08 95       	ret
     dd4:	85 b5       	in	r24, 0x25	; 37
     dd6:	80 64       	ori	r24, 0x40	; 64
     dd8:	85 bd       	out	0x25, r24	; 37
     dda:	85 b5       	in	r24, 0x25	; 37
     ddc:	87 7f       	andi	r24, 0xF7	; 247
     dde:	85 bd       	out	0x25, r24	; 37
     de0:	84 e0       	ldi	r24, 0x04	; 4
     de2:	08 95       	ret
     de4:	85 b5       	in	r24, 0x25	; 37
     de6:	8f 7b       	andi	r24, 0xBF	; 191
     de8:	85 bd       	out	0x25, r24	; 37
     dea:	85 b5       	in	r24, 0x25	; 37
     dec:	88 60       	ori	r24, 0x08	; 8
     dee:	85 bd       	out	0x25, r24	; 37
     df0:	84 e0       	ldi	r24, 0x04	; 4
     df2:	08 95       	ret
     df4:	85 b5       	in	r24, 0x25	; 37
     df6:	80 64       	ori	r24, 0x40	; 64
     df8:	85 bd       	out	0x25, r24	; 37
     dfa:	85 b5       	in	r24, 0x25	; 37
     dfc:	88 60       	ori	r24, 0x08	; 8
     dfe:	85 bd       	out	0x25, r24	; 37
     e00:	84 e0       	ldi	r24, 0x04	; 4
     e02:	08 95       	ret
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	08 95       	ret

00000e08 <TIMER_2_setIntialValue>:
     e08:	84 bd       	out	0x24, r24	; 36
     e0a:	84 e0       	ldi	r24, 0x04	; 4
     e0c:	08 95       	ret

00000e0e <TIMER_2_start>:
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	87 30       	cpi	r24, 0x07	; 7
     e12:	91 05       	cpc	r25, r1
     e14:	08 f0       	brcs	.+2      	; 0xe18 <TIMER_2_start+0xa>
     e16:	52 c0       	rjmp	.+164    	; 0xebc <TIMER_2_start+0xae>
     e18:	fc 01       	movw	r30, r24
     e1a:	e6 5d       	subi	r30, 0xD6	; 214
     e1c:	ff 4f       	sbci	r31, 0xFF	; 255
     e1e:	0c 94 c7 09 	jmp	0x138e	; 0x138e <__tablejump2__>
     e22:	85 b5       	in	r24, 0x25	; 37
     e24:	81 60       	ori	r24, 0x01	; 1
     e26:	85 bd       	out	0x25, r24	; 37
     e28:	85 b5       	in	r24, 0x25	; 37
     e2a:	8d 7f       	andi	r24, 0xFD	; 253
     e2c:	85 bd       	out	0x25, r24	; 37
     e2e:	85 b5       	in	r24, 0x25	; 37
     e30:	8b 7f       	andi	r24, 0xFB	; 251
     e32:	85 bd       	out	0x25, r24	; 37
     e34:	84 e0       	ldi	r24, 0x04	; 4
     e36:	08 95       	ret
     e38:	85 b5       	in	r24, 0x25	; 37
     e3a:	82 60       	ori	r24, 0x02	; 2
     e3c:	85 bd       	out	0x25, r24	; 37
     e3e:	85 b5       	in	r24, 0x25	; 37
     e40:	8e 7f       	andi	r24, 0xFE	; 254
     e42:	85 bd       	out	0x25, r24	; 37
     e44:	85 b5       	in	r24, 0x25	; 37
     e46:	8b 7f       	andi	r24, 0xFB	; 251
     e48:	85 bd       	out	0x25, r24	; 37
     e4a:	84 e0       	ldi	r24, 0x04	; 4
     e4c:	08 95       	ret
     e4e:	85 b5       	in	r24, 0x25	; 37
     e50:	81 60       	ori	r24, 0x01	; 1
     e52:	85 bd       	out	0x25, r24	; 37
     e54:	85 b5       	in	r24, 0x25	; 37
     e56:	82 60       	ori	r24, 0x02	; 2
     e58:	85 bd       	out	0x25, r24	; 37
     e5a:	85 b5       	in	r24, 0x25	; 37
     e5c:	8b 7f       	andi	r24, 0xFB	; 251
     e5e:	85 bd       	out	0x25, r24	; 37
     e60:	84 e0       	ldi	r24, 0x04	; 4
     e62:	08 95       	ret
     e64:	85 b5       	in	r24, 0x25	; 37
     e66:	84 60       	ori	r24, 0x04	; 4
     e68:	85 bd       	out	0x25, r24	; 37
     e6a:	85 b5       	in	r24, 0x25	; 37
     e6c:	8d 7f       	andi	r24, 0xFD	; 253
     e6e:	85 bd       	out	0x25, r24	; 37
     e70:	85 b5       	in	r24, 0x25	; 37
     e72:	8e 7f       	andi	r24, 0xFE	; 254
     e74:	85 bd       	out	0x25, r24	; 37
     e76:	84 e0       	ldi	r24, 0x04	; 4
     e78:	08 95       	ret
     e7a:	85 b5       	in	r24, 0x25	; 37
     e7c:	81 60       	ori	r24, 0x01	; 1
     e7e:	85 bd       	out	0x25, r24	; 37
     e80:	85 b5       	in	r24, 0x25	; 37
     e82:	8d 7f       	andi	r24, 0xFD	; 253
     e84:	85 bd       	out	0x25, r24	; 37
     e86:	85 b5       	in	r24, 0x25	; 37
     e88:	84 60       	ori	r24, 0x04	; 4
     e8a:	85 bd       	out	0x25, r24	; 37
     e8c:	84 e0       	ldi	r24, 0x04	; 4
     e8e:	08 95       	ret
     e90:	85 b5       	in	r24, 0x25	; 37
     e92:	84 60       	ori	r24, 0x04	; 4
     e94:	85 bd       	out	0x25, r24	; 37
     e96:	85 b5       	in	r24, 0x25	; 37
     e98:	8e 7f       	andi	r24, 0xFE	; 254
     e9a:	85 bd       	out	0x25, r24	; 37
     e9c:	85 b5       	in	r24, 0x25	; 37
     e9e:	82 60       	ori	r24, 0x02	; 2
     ea0:	85 bd       	out	0x25, r24	; 37
     ea2:	84 e0       	ldi	r24, 0x04	; 4
     ea4:	08 95       	ret
     ea6:	85 b5       	in	r24, 0x25	; 37
     ea8:	81 60       	ori	r24, 0x01	; 1
     eaa:	85 bd       	out	0x25, r24	; 37
     eac:	85 b5       	in	r24, 0x25	; 37
     eae:	82 60       	ori	r24, 0x02	; 2
     eb0:	85 bd       	out	0x25, r24	; 37
     eb2:	85 b5       	in	r24, 0x25	; 37
     eb4:	84 60       	ori	r24, 0x04	; 4
     eb6:	85 bd       	out	0x25, r24	; 37
     eb8:	84 e0       	ldi	r24, 0x04	; 4
     eba:	08 95       	ret
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	08 95       	ret

00000ec0 <TIMER_2_INT>:




void TIMER_2_INT(){
	sei();
     ec0:	78 94       	sei
	set_bit(TIMSK,TOIE2);
     ec2:	89 b7       	in	r24, 0x39	; 57
     ec4:	80 64       	ori	r24, 0x40	; 64
     ec6:	89 bf       	out	0x39, r24	; 57
	TIMER_2_init(NORMAL_MODE);
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	0e 94 da 06 	call	0xdb4	; 0xdb4 <TIMER_2_init>
	TIMER_2_setIntialValue(0);
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	0e 94 04 07 	call	0xe08	; 0xe08 <TIMER_2_setIntialValue>
	TIMER_2_start(PRECALER_1);
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	0e 94 07 07 	call	0xe0e	; 0xe0e <TIMER_2_start>
     eda:	08 95       	ret

00000edc <__vector_5>:
}




ISR(TIMER2_OVF){
     edc:	1f 92       	push	r1
     ede:	0f 92       	push	r0
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	0f 92       	push	r0
     ee4:	11 24       	eor	r1, r1
     ee6:	2f 93       	push	r18
     ee8:	8f 93       	push	r24
     eea:	9f 93       	push	r25
     eec:	af 93       	push	r26
     eee:	bf 93       	push	r27
	if(g_flagStage == 1 && g_flagTimer == 1){
     ef0:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <g_flagStage>
     ef4:	81 30       	cpi	r24, 0x01	; 1
     ef6:	91 f5       	brne	.+100    	; 0xf5c <__vector_5+0x80>
     ef8:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <g_flagTimer>
     efc:	81 30       	cpi	r24, 0x01	; 1
     efe:	71 f5       	brne	.+92     	; 0xf5c <__vector_5+0x80>
		
		if (ovf < 19532 ){
     f00:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <ovf>
     f04:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <ovf+0x1>
     f08:	a0 91 a5 00 	lds	r26, 0x00A5	; 0x8000a5 <ovf+0x2>
     f0c:	b0 91 a6 00 	lds	r27, 0x00A6	; 0x8000a6 <ovf+0x3>
     f10:	8c 34       	cpi	r24, 0x4C	; 76
     f12:	2c e4       	ldi	r18, 0x4C	; 76
     f14:	92 07       	cpc	r25, r18
     f16:	a1 05       	cpc	r26, r1
     f18:	b1 05       	cpc	r27, r1
     f1a:	64 f4       	brge	.+24     	; 0xf34 <__vector_5+0x58>
			ovf++;
     f1c:	01 96       	adiw	r24, 0x01	; 1
     f1e:	a1 1d       	adc	r26, r1
     f20:	b1 1d       	adc	r27, r1
     f22:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <ovf>
     f26:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <ovf+0x1>
     f2a:	a0 93 a5 00 	sts	0x00A5, r26	; 0x8000a5 <ovf+0x2>
     f2e:	b0 93 a6 00 	sts	0x00A6, r27	; 0x8000a6 <ovf+0x3>
     f32:	1c c0       	rjmp	.+56     	; 0xf6c <__vector_5+0x90>
		}
		else if ( ovf == 19532){
     f34:	8c 34       	cpi	r24, 0x4C	; 76
     f36:	9c 44       	sbci	r25, 0x4C	; 76
     f38:	a1 05       	cpc	r26, r1
     f3a:	b1 05       	cpc	r27, r1
     f3c:	b9 f4       	brne	.+46     	; 0xf6c <__vector_5+0x90>
			ovf =0 ;
     f3e:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <ovf>
     f42:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <ovf+0x1>
     f46:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <ovf+0x2>
     f4a:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <ovf+0x3>
			g_tempValue = 20 ;
     f4e:	84 e1       	ldi	r24, 0x14	; 20
     f50:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			g_flagStage = 2 ;
     f54:	82 e0       	ldi	r24, 0x02	; 2
     f56:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <g_flagStage>
     f5a:	08 c0       	rjmp	.+16     	; 0xf6c <__vector_5+0x90>
			
			
		}
		
	}else{
			ovf =0 ;
     f5c:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <ovf>
     f60:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <ovf+0x1>
     f64:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <ovf+0x2>
     f68:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <ovf+0x3>
	}
	
     f6c:	bf 91       	pop	r27
     f6e:	af 91       	pop	r26
     f70:	9f 91       	pop	r25
     f72:	8f 91       	pop	r24
     f74:	2f 91       	pop	r18
     f76:	0f 90       	pop	r0
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	0f 90       	pop	r0
     f7c:	1f 90       	pop	r1
     f7e:	18 95       	reti

00000f80 <__subsf3>:
     f80:	50 58       	subi	r21, 0x80	; 128

00000f82 <__addsf3>:
     f82:	bb 27       	eor	r27, r27
     f84:	aa 27       	eor	r26, r26
     f86:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <__addsf3x>
     f8a:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__fp_round>
     f8e:	0e 94 40 09 	call	0x1280	; 0x1280 <__fp_pscA>
     f92:	38 f0       	brcs	.+14     	; 0xfa2 <__addsf3+0x20>
     f94:	0e 94 47 09 	call	0x128e	; 0x128e <__fp_pscB>
     f98:	20 f0       	brcs	.+8      	; 0xfa2 <__addsf3+0x20>
     f9a:	39 f4       	brne	.+14     	; 0xfaa <__addsf3+0x28>
     f9c:	9f 3f       	cpi	r25, 0xFF	; 255
     f9e:	19 f4       	brne	.+6      	; 0xfa6 <__addsf3+0x24>
     fa0:	26 f4       	brtc	.+8      	; 0xfaa <__addsf3+0x28>
     fa2:	0c 94 3d 09 	jmp	0x127a	; 0x127a <__fp_nan>
     fa6:	0e f4       	brtc	.+2      	; 0xfaa <__addsf3+0x28>
     fa8:	e0 95       	com	r30
     faa:	e7 fb       	bst	r30, 7
     fac:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__fp_inf>

00000fb0 <__addsf3x>:
     fb0:	e9 2f       	mov	r30, r25
     fb2:	0e 94 5f 09 	call	0x12be	; 0x12be <__fp_split3>
     fb6:	58 f3       	brcs	.-42     	; 0xf8e <__addsf3+0xc>
     fb8:	ba 17       	cp	r27, r26
     fba:	62 07       	cpc	r22, r18
     fbc:	73 07       	cpc	r23, r19
     fbe:	84 07       	cpc	r24, r20
     fc0:	95 07       	cpc	r25, r21
     fc2:	20 f0       	brcs	.+8      	; 0xfcc <__addsf3x+0x1c>
     fc4:	79 f4       	brne	.+30     	; 0xfe4 <__addsf3x+0x34>
     fc6:	a6 f5       	brtc	.+104    	; 0x1030 <__addsf3x+0x80>
     fc8:	0c 94 99 09 	jmp	0x1332	; 0x1332 <__fp_zero>
     fcc:	0e f4       	brtc	.+2      	; 0xfd0 <__addsf3x+0x20>
     fce:	e0 95       	com	r30
     fd0:	0b 2e       	mov	r0, r27
     fd2:	ba 2f       	mov	r27, r26
     fd4:	a0 2d       	mov	r26, r0
     fd6:	0b 01       	movw	r0, r22
     fd8:	b9 01       	movw	r22, r18
     fda:	90 01       	movw	r18, r0
     fdc:	0c 01       	movw	r0, r24
     fde:	ca 01       	movw	r24, r20
     fe0:	a0 01       	movw	r20, r0
     fe2:	11 24       	eor	r1, r1
     fe4:	ff 27       	eor	r31, r31
     fe6:	59 1b       	sub	r21, r25
     fe8:	99 f0       	breq	.+38     	; 0x1010 <__addsf3x+0x60>
     fea:	59 3f       	cpi	r21, 0xF9	; 249
     fec:	50 f4       	brcc	.+20     	; 0x1002 <__addsf3x+0x52>
     fee:	50 3e       	cpi	r21, 0xE0	; 224
     ff0:	68 f1       	brcs	.+90     	; 0x104c <__addsf3x+0x9c>
     ff2:	1a 16       	cp	r1, r26
     ff4:	f0 40       	sbci	r31, 0x00	; 0
     ff6:	a2 2f       	mov	r26, r18
     ff8:	23 2f       	mov	r18, r19
     ffa:	34 2f       	mov	r19, r20
     ffc:	44 27       	eor	r20, r20
     ffe:	58 5f       	subi	r21, 0xF8	; 248
    1000:	f3 cf       	rjmp	.-26     	; 0xfe8 <__addsf3x+0x38>
    1002:	46 95       	lsr	r20
    1004:	37 95       	ror	r19
    1006:	27 95       	ror	r18
    1008:	a7 95       	ror	r26
    100a:	f0 40       	sbci	r31, 0x00	; 0
    100c:	53 95       	inc	r21
    100e:	c9 f7       	brne	.-14     	; 0x1002 <__addsf3x+0x52>
    1010:	7e f4       	brtc	.+30     	; 0x1030 <__addsf3x+0x80>
    1012:	1f 16       	cp	r1, r31
    1014:	ba 0b       	sbc	r27, r26
    1016:	62 0b       	sbc	r22, r18
    1018:	73 0b       	sbc	r23, r19
    101a:	84 0b       	sbc	r24, r20
    101c:	ba f0       	brmi	.+46     	; 0x104c <__addsf3x+0x9c>
    101e:	91 50       	subi	r25, 0x01	; 1
    1020:	a1 f0       	breq	.+40     	; 0x104a <__addsf3x+0x9a>
    1022:	ff 0f       	add	r31, r31
    1024:	bb 1f       	adc	r27, r27
    1026:	66 1f       	adc	r22, r22
    1028:	77 1f       	adc	r23, r23
    102a:	88 1f       	adc	r24, r24
    102c:	c2 f7       	brpl	.-16     	; 0x101e <__addsf3x+0x6e>
    102e:	0e c0       	rjmp	.+28     	; 0x104c <__addsf3x+0x9c>
    1030:	ba 0f       	add	r27, r26
    1032:	62 1f       	adc	r22, r18
    1034:	73 1f       	adc	r23, r19
    1036:	84 1f       	adc	r24, r20
    1038:	48 f4       	brcc	.+18     	; 0x104c <__addsf3x+0x9c>
    103a:	87 95       	ror	r24
    103c:	77 95       	ror	r23
    103e:	67 95       	ror	r22
    1040:	b7 95       	ror	r27
    1042:	f7 95       	ror	r31
    1044:	9e 3f       	cpi	r25, 0xFE	; 254
    1046:	08 f0       	brcs	.+2      	; 0x104a <__addsf3x+0x9a>
    1048:	b0 cf       	rjmp	.-160    	; 0xfaa <__addsf3+0x28>
    104a:	93 95       	inc	r25
    104c:	88 0f       	add	r24, r24
    104e:	08 f0       	brcs	.+2      	; 0x1052 <__addsf3x+0xa2>
    1050:	99 27       	eor	r25, r25
    1052:	ee 0f       	add	r30, r30
    1054:	97 95       	ror	r25
    1056:	87 95       	ror	r24
    1058:	08 95       	ret

0000105a <ceil>:
    105a:	0e 94 81 09 	call	0x1302	; 0x1302 <__fp_trunc>
    105e:	90 f0       	brcs	.+36     	; 0x1084 <ceil+0x2a>
    1060:	9f 37       	cpi	r25, 0x7F	; 127
    1062:	48 f4       	brcc	.+18     	; 0x1076 <ceil+0x1c>
    1064:	91 11       	cpse	r25, r1
    1066:	16 f4       	brtc	.+4      	; 0x106c <ceil+0x12>
    1068:	0c 94 9a 09 	jmp	0x1334	; 0x1334 <__fp_szero>
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	80 e8       	ldi	r24, 0x80	; 128
    1072:	9f e3       	ldi	r25, 0x3F	; 63
    1074:	08 95       	ret
    1076:	26 f0       	brts	.+8      	; 0x1080 <ceil+0x26>
    1078:	1b 16       	cp	r1, r27
    107a:	61 1d       	adc	r22, r1
    107c:	71 1d       	adc	r23, r1
    107e:	81 1d       	adc	r24, r1
    1080:	0c 94 14 09 	jmp	0x1228	; 0x1228 <__fp_mintl>
    1084:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__fp_mpack>

00001088 <__cmpsf2>:
    1088:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <__fp_cmp>
    108c:	08 f4       	brcc	.+2      	; 0x1090 <__cmpsf2+0x8>
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	08 95       	ret

00001092 <__divsf3>:
    1092:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__divsf3x>
    1096:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__fp_round>
    109a:	0e 94 47 09 	call	0x128e	; 0x128e <__fp_pscB>
    109e:	58 f0       	brcs	.+22     	; 0x10b6 <__divsf3+0x24>
    10a0:	0e 94 40 09 	call	0x1280	; 0x1280 <__fp_pscA>
    10a4:	40 f0       	brcs	.+16     	; 0x10b6 <__divsf3+0x24>
    10a6:	29 f4       	brne	.+10     	; 0x10b2 <__divsf3+0x20>
    10a8:	5f 3f       	cpi	r21, 0xFF	; 255
    10aa:	29 f0       	breq	.+10     	; 0x10b6 <__divsf3+0x24>
    10ac:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__fp_inf>
    10b0:	51 11       	cpse	r21, r1
    10b2:	0c 94 9a 09 	jmp	0x1334	; 0x1334 <__fp_szero>
    10b6:	0c 94 3d 09 	jmp	0x127a	; 0x127a <__fp_nan>

000010ba <__divsf3x>:
    10ba:	0e 94 5f 09 	call	0x12be	; 0x12be <__fp_split3>
    10be:	68 f3       	brcs	.-38     	; 0x109a <__divsf3+0x8>

000010c0 <__divsf3_pse>:
    10c0:	99 23       	and	r25, r25
    10c2:	b1 f3       	breq	.-20     	; 0x10b0 <__divsf3+0x1e>
    10c4:	55 23       	and	r21, r21
    10c6:	91 f3       	breq	.-28     	; 0x10ac <__divsf3+0x1a>
    10c8:	95 1b       	sub	r25, r21
    10ca:	55 0b       	sbc	r21, r21
    10cc:	bb 27       	eor	r27, r27
    10ce:	aa 27       	eor	r26, r26
    10d0:	62 17       	cp	r22, r18
    10d2:	73 07       	cpc	r23, r19
    10d4:	84 07       	cpc	r24, r20
    10d6:	38 f0       	brcs	.+14     	; 0x10e6 <__divsf3_pse+0x26>
    10d8:	9f 5f       	subi	r25, 0xFF	; 255
    10da:	5f 4f       	sbci	r21, 0xFF	; 255
    10dc:	22 0f       	add	r18, r18
    10de:	33 1f       	adc	r19, r19
    10e0:	44 1f       	adc	r20, r20
    10e2:	aa 1f       	adc	r26, r26
    10e4:	a9 f3       	breq	.-22     	; 0x10d0 <__divsf3_pse+0x10>
    10e6:	35 d0       	rcall	.+106    	; 0x1152 <__divsf3_pse+0x92>
    10e8:	0e 2e       	mov	r0, r30
    10ea:	3a f0       	brmi	.+14     	; 0x10fa <__divsf3_pse+0x3a>
    10ec:	e0 e8       	ldi	r30, 0x80	; 128
    10ee:	32 d0       	rcall	.+100    	; 0x1154 <__divsf3_pse+0x94>
    10f0:	91 50       	subi	r25, 0x01	; 1
    10f2:	50 40       	sbci	r21, 0x00	; 0
    10f4:	e6 95       	lsr	r30
    10f6:	00 1c       	adc	r0, r0
    10f8:	ca f7       	brpl	.-14     	; 0x10ec <__divsf3_pse+0x2c>
    10fa:	2b d0       	rcall	.+86     	; 0x1152 <__divsf3_pse+0x92>
    10fc:	fe 2f       	mov	r31, r30
    10fe:	29 d0       	rcall	.+82     	; 0x1152 <__divsf3_pse+0x92>
    1100:	66 0f       	add	r22, r22
    1102:	77 1f       	adc	r23, r23
    1104:	88 1f       	adc	r24, r24
    1106:	bb 1f       	adc	r27, r27
    1108:	26 17       	cp	r18, r22
    110a:	37 07       	cpc	r19, r23
    110c:	48 07       	cpc	r20, r24
    110e:	ab 07       	cpc	r26, r27
    1110:	b0 e8       	ldi	r27, 0x80	; 128
    1112:	09 f0       	breq	.+2      	; 0x1116 <__divsf3_pse+0x56>
    1114:	bb 0b       	sbc	r27, r27
    1116:	80 2d       	mov	r24, r0
    1118:	bf 01       	movw	r22, r30
    111a:	ff 27       	eor	r31, r31
    111c:	93 58       	subi	r25, 0x83	; 131
    111e:	5f 4f       	sbci	r21, 0xFF	; 255
    1120:	3a f0       	brmi	.+14     	; 0x1130 <__divsf3_pse+0x70>
    1122:	9e 3f       	cpi	r25, 0xFE	; 254
    1124:	51 05       	cpc	r21, r1
    1126:	78 f0       	brcs	.+30     	; 0x1146 <__divsf3_pse+0x86>
    1128:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__fp_inf>
    112c:	0c 94 9a 09 	jmp	0x1334	; 0x1334 <__fp_szero>
    1130:	5f 3f       	cpi	r21, 0xFF	; 255
    1132:	e4 f3       	brlt	.-8      	; 0x112c <__divsf3_pse+0x6c>
    1134:	98 3e       	cpi	r25, 0xE8	; 232
    1136:	d4 f3       	brlt	.-12     	; 0x112c <__divsf3_pse+0x6c>
    1138:	86 95       	lsr	r24
    113a:	77 95       	ror	r23
    113c:	67 95       	ror	r22
    113e:	b7 95       	ror	r27
    1140:	f7 95       	ror	r31
    1142:	9f 5f       	subi	r25, 0xFF	; 255
    1144:	c9 f7       	brne	.-14     	; 0x1138 <__divsf3_pse+0x78>
    1146:	88 0f       	add	r24, r24
    1148:	91 1d       	adc	r25, r1
    114a:	96 95       	lsr	r25
    114c:	87 95       	ror	r24
    114e:	97 f9       	bld	r25, 7
    1150:	08 95       	ret
    1152:	e1 e0       	ldi	r30, 0x01	; 1
    1154:	66 0f       	add	r22, r22
    1156:	77 1f       	adc	r23, r23
    1158:	88 1f       	adc	r24, r24
    115a:	bb 1f       	adc	r27, r27
    115c:	62 17       	cp	r22, r18
    115e:	73 07       	cpc	r23, r19
    1160:	84 07       	cpc	r24, r20
    1162:	ba 07       	cpc	r27, r26
    1164:	20 f0       	brcs	.+8      	; 0x116e <__divsf3_pse+0xae>
    1166:	62 1b       	sub	r22, r18
    1168:	73 0b       	sbc	r23, r19
    116a:	84 0b       	sbc	r24, r20
    116c:	ba 0b       	sbc	r27, r26
    116e:	ee 1f       	adc	r30, r30
    1170:	88 f7       	brcc	.-30     	; 0x1154 <__divsf3_pse+0x94>
    1172:	e0 95       	com	r30
    1174:	08 95       	ret

00001176 <__fixunssfsi>:
    1176:	0e 94 67 09 	call	0x12ce	; 0x12ce <__fp_splitA>
    117a:	88 f0       	brcs	.+34     	; 0x119e <__fixunssfsi+0x28>
    117c:	9f 57       	subi	r25, 0x7F	; 127
    117e:	98 f0       	brcs	.+38     	; 0x11a6 <__fixunssfsi+0x30>
    1180:	b9 2f       	mov	r27, r25
    1182:	99 27       	eor	r25, r25
    1184:	b7 51       	subi	r27, 0x17	; 23
    1186:	b0 f0       	brcs	.+44     	; 0x11b4 <__fixunssfsi+0x3e>
    1188:	e1 f0       	breq	.+56     	; 0x11c2 <__fixunssfsi+0x4c>
    118a:	66 0f       	add	r22, r22
    118c:	77 1f       	adc	r23, r23
    118e:	88 1f       	adc	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	1a f0       	brmi	.+6      	; 0x119a <__fixunssfsi+0x24>
    1194:	ba 95       	dec	r27
    1196:	c9 f7       	brne	.-14     	; 0x118a <__fixunssfsi+0x14>
    1198:	14 c0       	rjmp	.+40     	; 0x11c2 <__fixunssfsi+0x4c>
    119a:	b1 30       	cpi	r27, 0x01	; 1
    119c:	91 f0       	breq	.+36     	; 0x11c2 <__fixunssfsi+0x4c>
    119e:	0e 94 99 09 	call	0x1332	; 0x1332 <__fp_zero>
    11a2:	b1 e0       	ldi	r27, 0x01	; 1
    11a4:	08 95       	ret
    11a6:	0c 94 99 09 	jmp	0x1332	; 0x1332 <__fp_zero>
    11aa:	67 2f       	mov	r22, r23
    11ac:	78 2f       	mov	r23, r24
    11ae:	88 27       	eor	r24, r24
    11b0:	b8 5f       	subi	r27, 0xF8	; 248
    11b2:	39 f0       	breq	.+14     	; 0x11c2 <__fixunssfsi+0x4c>
    11b4:	b9 3f       	cpi	r27, 0xF9	; 249
    11b6:	cc f3       	brlt	.-14     	; 0x11aa <__fixunssfsi+0x34>
    11b8:	86 95       	lsr	r24
    11ba:	77 95       	ror	r23
    11bc:	67 95       	ror	r22
    11be:	b3 95       	inc	r27
    11c0:	d9 f7       	brne	.-10     	; 0x11b8 <__fixunssfsi+0x42>
    11c2:	3e f4       	brtc	.+14     	; 0x11d2 <__fixunssfsi+0x5c>
    11c4:	90 95       	com	r25
    11c6:	80 95       	com	r24
    11c8:	70 95       	com	r23
    11ca:	61 95       	neg	r22
    11cc:	7f 4f       	sbci	r23, 0xFF	; 255
    11ce:	8f 4f       	sbci	r24, 0xFF	; 255
    11d0:	9f 4f       	sbci	r25, 0xFF	; 255
    11d2:	08 95       	ret

000011d4 <__fp_cmp>:
    11d4:	99 0f       	add	r25, r25
    11d6:	00 08       	sbc	r0, r0
    11d8:	55 0f       	add	r21, r21
    11da:	aa 0b       	sbc	r26, r26
    11dc:	e0 e8       	ldi	r30, 0x80	; 128
    11de:	fe ef       	ldi	r31, 0xFE	; 254
    11e0:	16 16       	cp	r1, r22
    11e2:	17 06       	cpc	r1, r23
    11e4:	e8 07       	cpc	r30, r24
    11e6:	f9 07       	cpc	r31, r25
    11e8:	c0 f0       	brcs	.+48     	; 0x121a <__fp_cmp+0x46>
    11ea:	12 16       	cp	r1, r18
    11ec:	13 06       	cpc	r1, r19
    11ee:	e4 07       	cpc	r30, r20
    11f0:	f5 07       	cpc	r31, r21
    11f2:	98 f0       	brcs	.+38     	; 0x121a <__fp_cmp+0x46>
    11f4:	62 1b       	sub	r22, r18
    11f6:	73 0b       	sbc	r23, r19
    11f8:	84 0b       	sbc	r24, r20
    11fa:	95 0b       	sbc	r25, r21
    11fc:	39 f4       	brne	.+14     	; 0x120c <__fp_cmp+0x38>
    11fe:	0a 26       	eor	r0, r26
    1200:	61 f0       	breq	.+24     	; 0x121a <__fp_cmp+0x46>
    1202:	23 2b       	or	r18, r19
    1204:	24 2b       	or	r18, r20
    1206:	25 2b       	or	r18, r21
    1208:	21 f4       	brne	.+8      	; 0x1212 <__fp_cmp+0x3e>
    120a:	08 95       	ret
    120c:	0a 26       	eor	r0, r26
    120e:	09 f4       	brne	.+2      	; 0x1212 <__fp_cmp+0x3e>
    1210:	a1 40       	sbci	r26, 0x01	; 1
    1212:	a6 95       	lsr	r26
    1214:	8f ef       	ldi	r24, 0xFF	; 255
    1216:	81 1d       	adc	r24, r1
    1218:	81 1d       	adc	r24, r1
    121a:	08 95       	ret

0000121c <__fp_inf>:
    121c:	97 f9       	bld	r25, 7
    121e:	9f 67       	ori	r25, 0x7F	; 127
    1220:	80 e8       	ldi	r24, 0x80	; 128
    1222:	70 e0       	ldi	r23, 0x00	; 0
    1224:	60 e0       	ldi	r22, 0x00	; 0
    1226:	08 95       	ret

00001228 <__fp_mintl>:
    1228:	88 23       	and	r24, r24
    122a:	71 f4       	brne	.+28     	; 0x1248 <__fp_mintl+0x20>
    122c:	77 23       	and	r23, r23
    122e:	21 f0       	breq	.+8      	; 0x1238 <__fp_mintl+0x10>
    1230:	98 50       	subi	r25, 0x08	; 8
    1232:	87 2b       	or	r24, r23
    1234:	76 2f       	mov	r23, r22
    1236:	07 c0       	rjmp	.+14     	; 0x1246 <__fp_mintl+0x1e>
    1238:	66 23       	and	r22, r22
    123a:	11 f4       	brne	.+4      	; 0x1240 <__fp_mintl+0x18>
    123c:	99 27       	eor	r25, r25
    123e:	0d c0       	rjmp	.+26     	; 0x125a <__fp_mintl+0x32>
    1240:	90 51       	subi	r25, 0x10	; 16
    1242:	86 2b       	or	r24, r22
    1244:	70 e0       	ldi	r23, 0x00	; 0
    1246:	60 e0       	ldi	r22, 0x00	; 0
    1248:	2a f0       	brmi	.+10     	; 0x1254 <__fp_mintl+0x2c>
    124a:	9a 95       	dec	r25
    124c:	66 0f       	add	r22, r22
    124e:	77 1f       	adc	r23, r23
    1250:	88 1f       	adc	r24, r24
    1252:	da f7       	brpl	.-10     	; 0x124a <__fp_mintl+0x22>
    1254:	88 0f       	add	r24, r24
    1256:	96 95       	lsr	r25
    1258:	87 95       	ror	r24
    125a:	97 f9       	bld	r25, 7
    125c:	08 95       	ret

0000125e <__fp_mpack>:
    125e:	9f 3f       	cpi	r25, 0xFF	; 255
    1260:	31 f0       	breq	.+12     	; 0x126e <__fp_mpack_finite+0xc>

00001262 <__fp_mpack_finite>:
    1262:	91 50       	subi	r25, 0x01	; 1
    1264:	20 f4       	brcc	.+8      	; 0x126e <__fp_mpack_finite+0xc>
    1266:	87 95       	ror	r24
    1268:	77 95       	ror	r23
    126a:	67 95       	ror	r22
    126c:	b7 95       	ror	r27
    126e:	88 0f       	add	r24, r24
    1270:	91 1d       	adc	r25, r1
    1272:	96 95       	lsr	r25
    1274:	87 95       	ror	r24
    1276:	97 f9       	bld	r25, 7
    1278:	08 95       	ret

0000127a <__fp_nan>:
    127a:	9f ef       	ldi	r25, 0xFF	; 255
    127c:	80 ec       	ldi	r24, 0xC0	; 192
    127e:	08 95       	ret

00001280 <__fp_pscA>:
    1280:	00 24       	eor	r0, r0
    1282:	0a 94       	dec	r0
    1284:	16 16       	cp	r1, r22
    1286:	17 06       	cpc	r1, r23
    1288:	18 06       	cpc	r1, r24
    128a:	09 06       	cpc	r0, r25
    128c:	08 95       	ret

0000128e <__fp_pscB>:
    128e:	00 24       	eor	r0, r0
    1290:	0a 94       	dec	r0
    1292:	12 16       	cp	r1, r18
    1294:	13 06       	cpc	r1, r19
    1296:	14 06       	cpc	r1, r20
    1298:	05 06       	cpc	r0, r21
    129a:	08 95       	ret

0000129c <__fp_round>:
    129c:	09 2e       	mov	r0, r25
    129e:	03 94       	inc	r0
    12a0:	00 0c       	add	r0, r0
    12a2:	11 f4       	brne	.+4      	; 0x12a8 <__fp_round+0xc>
    12a4:	88 23       	and	r24, r24
    12a6:	52 f0       	brmi	.+20     	; 0x12bc <__fp_round+0x20>
    12a8:	bb 0f       	add	r27, r27
    12aa:	40 f4       	brcc	.+16     	; 0x12bc <__fp_round+0x20>
    12ac:	bf 2b       	or	r27, r31
    12ae:	11 f4       	brne	.+4      	; 0x12b4 <__fp_round+0x18>
    12b0:	60 ff       	sbrs	r22, 0
    12b2:	04 c0       	rjmp	.+8      	; 0x12bc <__fp_round+0x20>
    12b4:	6f 5f       	subi	r22, 0xFF	; 255
    12b6:	7f 4f       	sbci	r23, 0xFF	; 255
    12b8:	8f 4f       	sbci	r24, 0xFF	; 255
    12ba:	9f 4f       	sbci	r25, 0xFF	; 255
    12bc:	08 95       	ret

000012be <__fp_split3>:
    12be:	57 fd       	sbrc	r21, 7
    12c0:	90 58       	subi	r25, 0x80	; 128
    12c2:	44 0f       	add	r20, r20
    12c4:	55 1f       	adc	r21, r21
    12c6:	59 f0       	breq	.+22     	; 0x12de <__fp_splitA+0x10>
    12c8:	5f 3f       	cpi	r21, 0xFF	; 255
    12ca:	71 f0       	breq	.+28     	; 0x12e8 <__fp_splitA+0x1a>
    12cc:	47 95       	ror	r20

000012ce <__fp_splitA>:
    12ce:	88 0f       	add	r24, r24
    12d0:	97 fb       	bst	r25, 7
    12d2:	99 1f       	adc	r25, r25
    12d4:	61 f0       	breq	.+24     	; 0x12ee <__fp_splitA+0x20>
    12d6:	9f 3f       	cpi	r25, 0xFF	; 255
    12d8:	79 f0       	breq	.+30     	; 0x12f8 <__fp_splitA+0x2a>
    12da:	87 95       	ror	r24
    12dc:	08 95       	ret
    12de:	12 16       	cp	r1, r18
    12e0:	13 06       	cpc	r1, r19
    12e2:	14 06       	cpc	r1, r20
    12e4:	55 1f       	adc	r21, r21
    12e6:	f2 cf       	rjmp	.-28     	; 0x12cc <__fp_split3+0xe>
    12e8:	46 95       	lsr	r20
    12ea:	f1 df       	rcall	.-30     	; 0x12ce <__fp_splitA>
    12ec:	08 c0       	rjmp	.+16     	; 0x12fe <__fp_splitA+0x30>
    12ee:	16 16       	cp	r1, r22
    12f0:	17 06       	cpc	r1, r23
    12f2:	18 06       	cpc	r1, r24
    12f4:	99 1f       	adc	r25, r25
    12f6:	f1 cf       	rjmp	.-30     	; 0x12da <__fp_splitA+0xc>
    12f8:	86 95       	lsr	r24
    12fa:	71 05       	cpc	r23, r1
    12fc:	61 05       	cpc	r22, r1
    12fe:	08 94       	sec
    1300:	08 95       	ret

00001302 <__fp_trunc>:
    1302:	0e 94 67 09 	call	0x12ce	; 0x12ce <__fp_splitA>
    1306:	a0 f0       	brcs	.+40     	; 0x1330 <__fp_trunc+0x2e>
    1308:	be e7       	ldi	r27, 0x7E	; 126
    130a:	b9 17       	cp	r27, r25
    130c:	88 f4       	brcc	.+34     	; 0x1330 <__fp_trunc+0x2e>
    130e:	bb 27       	eor	r27, r27
    1310:	9f 38       	cpi	r25, 0x8F	; 143
    1312:	60 f4       	brcc	.+24     	; 0x132c <__fp_trunc+0x2a>
    1314:	16 16       	cp	r1, r22
    1316:	b1 1d       	adc	r27, r1
    1318:	67 2f       	mov	r22, r23
    131a:	78 2f       	mov	r23, r24
    131c:	88 27       	eor	r24, r24
    131e:	98 5f       	subi	r25, 0xF8	; 248
    1320:	f7 cf       	rjmp	.-18     	; 0x1310 <__fp_trunc+0xe>
    1322:	86 95       	lsr	r24
    1324:	77 95       	ror	r23
    1326:	67 95       	ror	r22
    1328:	b1 1d       	adc	r27, r1
    132a:	93 95       	inc	r25
    132c:	96 39       	cpi	r25, 0x96	; 150
    132e:	c8 f3       	brcs	.-14     	; 0x1322 <__fp_trunc+0x20>
    1330:	08 95       	ret

00001332 <__fp_zero>:
    1332:	e8 94       	clt

00001334 <__fp_szero>:
    1334:	bb 27       	eor	r27, r27
    1336:	66 27       	eor	r22, r22
    1338:	77 27       	eor	r23, r23
    133a:	cb 01       	movw	r24, r22
    133c:	97 f9       	bld	r25, 7
    133e:	08 95       	ret

00001340 <__gesf2>:
    1340:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <__fp_cmp>
    1344:	08 f4       	brcc	.+2      	; 0x1348 <__gesf2+0x8>
    1346:	8f ef       	ldi	r24, 0xFF	; 255
    1348:	08 95       	ret

0000134a <__udivmodsi4>:
    134a:	a1 e2       	ldi	r26, 0x21	; 33
    134c:	1a 2e       	mov	r1, r26
    134e:	aa 1b       	sub	r26, r26
    1350:	bb 1b       	sub	r27, r27
    1352:	fd 01       	movw	r30, r26
    1354:	0d c0       	rjmp	.+26     	; 0x1370 <__udivmodsi4_ep>

00001356 <__udivmodsi4_loop>:
    1356:	aa 1f       	adc	r26, r26
    1358:	bb 1f       	adc	r27, r27
    135a:	ee 1f       	adc	r30, r30
    135c:	ff 1f       	adc	r31, r31
    135e:	a2 17       	cp	r26, r18
    1360:	b3 07       	cpc	r27, r19
    1362:	e4 07       	cpc	r30, r20
    1364:	f5 07       	cpc	r31, r21
    1366:	20 f0       	brcs	.+8      	; 0x1370 <__udivmodsi4_ep>
    1368:	a2 1b       	sub	r26, r18
    136a:	b3 0b       	sbc	r27, r19
    136c:	e4 0b       	sbc	r30, r20
    136e:	f5 0b       	sbc	r31, r21

00001370 <__udivmodsi4_ep>:
    1370:	66 1f       	adc	r22, r22
    1372:	77 1f       	adc	r23, r23
    1374:	88 1f       	adc	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	1a 94       	dec	r1
    137a:	69 f7       	brne	.-38     	; 0x1356 <__udivmodsi4_loop>
    137c:	60 95       	com	r22
    137e:	70 95       	com	r23
    1380:	80 95       	com	r24
    1382:	90 95       	com	r25
    1384:	9b 01       	movw	r18, r22
    1386:	ac 01       	movw	r20, r24
    1388:	bd 01       	movw	r22, r26
    138a:	cf 01       	movw	r24, r30
    138c:	08 95       	ret

0000138e <__tablejump2__>:
    138e:	ee 0f       	add	r30, r30
    1390:	ff 1f       	adc	r31, r31
    1392:	05 90       	lpm	r0, Z+
    1394:	f4 91       	lpm	r31, Z
    1396:	e0 2d       	mov	r30, r0
    1398:	09 94       	ijmp

0000139a <_exit>:
    139a:	f8 94       	cli

0000139c <__stop_program>:
    139c:	ff cf       	rjmp	.-2      	; 0x139c <__stop_program>
